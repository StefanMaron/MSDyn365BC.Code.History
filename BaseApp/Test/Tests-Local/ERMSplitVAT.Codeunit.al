codeunit 144561 "ERM Split VAT"
{
    Subtype = Test;
    TestPermissions = Disabled;

    trigger OnRun()
    begin
        // [FEATURE] [Split VAT]
    end;

    var
        Assert: Codeunit Assert;
        LibraryERM: Codeunit "Library - ERM";
        LibrarySales: Codeunit "Library - Sales";
        LibrarySplitVAT: Codeunit "Library - Split VAT";
        ChangeQuantityTxt: Label 'If you change';
        DoYouWantToGenerateLinesTxt: Label 'Do you want to generate split VAT lines automatically?';
        NoLinesTxt: Label 'There are no invoice lines to be used for generating split VAT lines.';
        RegenerateLinesTxt: Label 'Split VAT Lines have already been generated automatically. Do you want to delete and regenerate them?';
        TriggerDoesntWorkTxt: Label '%1 change didn''t trigger line re-generation.', Comment = '%1=The field that changed';
        TriggerShouldNotWorkTxt: Label '%1 change should not trigger line re-generation.', Comment = '%1=The field that changed';
        WrongLineAmountTxt: Label 'Unexpected amount on the invoice line.';
        LibraryRandom: Codeunit "Library - Random";
        LibraryReportDataset: Codeunit "Library - Report Dataset";
        LibraryVariableStorage: Codeunit "Library - Variable Storage";
        LibraryService: Codeunit "Library - Service";
        LibrarySetupStorage: Codeunit "Library - Setup Storage";
        LibraryDimension: Codeunit "Library - Dimension";
        LibraryNotificationMgt: Codeunit "Library - Notification Mgt.";
        LibraryInventory: Codeunit "Library - Inventory";
        ChangeTriggeredCalled: Boolean;
        ReGenerateQuestionAsked: Boolean;
        IsInitialized: Boolean;

    [Test]
    [HandlerFunctions('GenerateLinesConfirmHandler')]
    [Scope('OnPrem')]
    procedure TestAutoGeneratedLine()
    var
        VATPostingSetup10: Record "VAT Posting Setup";
        SalesHeader: Record "Sales Header";
    begin
        // [GIVEN] a sales invoice with one line
        CreateVATPostingSetup(VATPostingSetup10, 10);
        InitializeSplitVATTestLine(VATPostingSetup10, 100);
        CreateSalesInvoice(SalesHeader, VATPostingSetup10);

        // [WHEN] Generate Split Lines is invoked
        ExecuteLineGenerator(SalesHeader);

        // [THEN] one sales invoice line is created, having correct values
        RetrieveAndVerifySalesLineParameters(SalesHeader, VATPostingSetup10, -10);

        // Cleanup
        TestCleanup();
    end;

    [Test]
    [HandlerFunctions('GenerateLinesConfirmHandler')]
    [Scope('OnPrem')]
    procedure TestAutoGeneratedLinesSamePostingGroup()
    var
        VATPostingSetup10: Record "VAT Posting Setup";
        SalesHeader: Record "Sales Header";
    begin
        // [GIVEN] a sales invoice with two lines in the same VAT Prod. Posting Groups
        CreateVATPostingSetup(VATPostingSetup10, 10);
        InitializeSplitVATTestLine(VATPostingSetup10, 1000);
        InitializeSplitVATTestLine(VATPostingSetup10, 1000);
        CreateSalesInvoice(SalesHeader, VATPostingSetup10);

        // [WHEN] Generate Split Lines is invoked
        ExecuteLineGenerator(SalesHeader);

        // [THEN] one sales invoice line is created, having correct values
        RetrieveAndVerifySalesLineParameters(SalesHeader, VATPostingSetup10, -200);

        // Cleanup
        TestCleanup();
    end;

    [Test]
    [HandlerFunctions('GenerateLinesConfirmHandler')]
    [Scope('OnPrem')]
    procedure TestAutoGeneratedLinesTwoPostingGroups()
    var
        VATPostingSetup10: Record "VAT Posting Setup";
        VATPostingSetup20: Record "VAT Posting Setup";
        SalesHeader: Record "Sales Header";
    begin
        // [GIVEN] a sales invoice with two lines in different VAT Prod. Posting Group
        CreateVATPostingSetup(VATPostingSetup10, 10);
        InitializeSplitVATTestLine(VATPostingSetup10, 100);
        CreateVATPostingSetupUsingGroup(VATPostingSetup20, 20, VATPostingSetup10."VAT Bus. Posting Group");
        InitializeSplitVATTestLine(VATPostingSetup20, 1000);
        CreateSalesInvoice(SalesHeader, VATPostingSetup10);

        // [WHEN] Generate Split Lines is invoked
        ExecuteLineGenerator(SalesHeader);

        // [THEN] two sales invoice lines are created, having correct values
        RetrieveAndVerifySalesLineParameters(SalesHeader, VATPostingSetup10, -10);
        RetrieveAndVerifySalesLineParameters(SalesHeader, VATPostingSetup20, -200);

        // Cleanup
        TestCleanup();
    end;

    [Test]
    [HandlerFunctions('GenerateLinesConfirmHandler')]
    [Scope('OnPrem')]
    procedure TestAutoGeneratedLinesTwoPostingGroupsInterleave()
    var
        VATPostingSetup10: Record "VAT Posting Setup";
        VATPostingSetup20: Record "VAT Posting Setup";
        SalesHeader: Record "Sales Header";
    begin
        // [GIVEN] a sales invoice with multiple lines in 2 different VAT Prod. Posting Group
        CreateVATPostingSetup(VATPostingSetup10, 10);
        CreateVATPostingSetupUsingGroup(VATPostingSetup20, 20, VATPostingSetup10."VAT Bus. Posting Group");

        InitializeSplitVATTestLine(VATPostingSetup10, 100);
        InitializeSplitVATTestLine(VATPostingSetup20, 1000);
        InitializeSplitVATTestLine(VATPostingSetup10, 100);
        InitializeSplitVATTestLine(VATPostingSetup20, 1000);
        InitializeSplitVATTestLine(VATPostingSetup20, 1000);
        InitializeSplitVATTestLine(VATPostingSetup10, 100);
        InitializeSplitVATTestLine(VATPostingSetup10, 100);
        InitializeSplitVATTestLine(VATPostingSetup10, 100);
        InitializeSplitVATTestLine(VATPostingSetup10, 100);

        CreateSalesInvoice(SalesHeader, VATPostingSetup10);

        // [WHEN] Generate Split Lines is invoked
        ExecuteLineGenerator(SalesHeader);

        // [THEN] two sales invoice lines are created, having correct values
        RetrieveAndVerifySalesLineParameters(SalesHeader, VATPostingSetup10, -60);
        RetrieveAndVerifySalesLineParameters(SalesHeader, VATPostingSetup20, -600);

        // Cleanup
        TestCleanup();
    end;

    [Test]
    [HandlerFunctions('NothingToGenerateMessageHandler')]
    [Scope('OnPrem')]
    procedure TestNothingToGenerate()
    var
        VATPostingSetup10: Record "VAT Posting Setup";
        SalesHeader: Record "Sales Header";
    begin
        // [GIVEN] a sales invoice without lines
        CreateVATPostingSetup(VATPostingSetup10, 10);
        InitializeSplitVATTestLine(VATPostingSetup10, 100);
        LibrarySplitVAT.CreateSalesHeader(
          SalesHeader, SalesHeader."Document Type"::Invoice, VATPostingSetup10."VAT Bus. Posting Group");

        // [WHEN] Generate Split Lines is invoked
        ExecuteLineGenerator(SalesHeader);

        // [THEN] the user is notified that there is nothing to generate
        // This is validated by the execution of the related message handler

        // Cleanup
        TestCleanup();
    end;

    [Test]
    [HandlerFunctions('ReGenerateLinesConfirmHandler')]
    [Scope('OnPrem')]
    procedure TestReGenerateLine()
    var
        VATPostingSetup10: Record "VAT Posting Setup";
        SalesHeader: Record "Sales Header";
    begin
        // [GIVEN] a sales invoice with one line
        CreateVATPostingSetup(VATPostingSetup10, 10);
        InitializeSplitVATTestLine(VATPostingSetup10, 100);
        CreateSalesInvoice(SalesHeader, VATPostingSetup10);
        ExecuteLineGenerator(SalesHeader);

        // [THEN] one sales invoice line is created, having correct values
        RetrieveAndVerifySalesLineParameters(SalesHeader, VATPostingSetup10, -10);

        // [WHEN] Generate Split Lines is invoked a second time
        ExecuteLineGenerator(SalesHeader);

        // [THEN] the user is asked if they want to delete and re-generate lines
        Assert.IsTrue(ReGenerateQuestionAsked, 'The user should be asked if they want to delete and regenerate lines');
        // [THEN] one sales invoice line is created, having correct values
        RetrieveAndVerifySalesLineParameters(SalesHeader, VATPostingSetup10, -10);

        // Cleanup
        TestCleanup();
    end;

    [Test]
    [HandlerFunctions('ChangeTriggeredConfirmHandler,SendNotificationHandler,RecallNotificationHandler')]
    [Scope('OnPrem')]
    procedure TestUpdateTriggerQuantity()
    var
        NotificationLifecycleMgt: Codeunit "Notification Lifecycle Mgt.";
        SalesInvoice: TestPage "Sales Invoice";
    begin
        // [GIVEN] a sales invoice having a user entered and an automatically generated line
        CreateSalesInvoiceWithGeneratedLine(SalesInvoice, true);

        // [WHEN] Quantity is changed on the user-entered line
        SalesInvoice.SalesLines.Quantity.SetValue(2);

        // [THEN] Line-regeneration is started (checked in the modal page handler)
        Assert.IsTrue(ChangeTriggeredCalled, StrSubstNo(TriggerDoesntWorkTxt, 'Quantity'));

        // Cleanup
        TestCleanup();
        NotificationLifecycleMgt.RecallAllNotifications();
    end;

    [Test]
    [HandlerFunctions('ChangeTriggeredConfirmHandler')]
    [Scope('OnPrem')]
    procedure TestUpdateTriggerAmount()
    var
        SalesInvoice: TestPage "Sales Invoice";
    begin
        // [GIVEN] a sales invoice having a user entered and an automatically generated line
        CreateSalesInvoiceWithGeneratedLine(SalesInvoice, true);

        // [WHEN] Quantity is changed on the user-entered line
        SalesInvoice.SalesLines."Unit Price".SetValue(500);

        // [THEN] Line-regeneration is started (checked in the modal page handler)
        Assert.IsTrue(ChangeTriggeredCalled, StrSubstNo(TriggerDoesntWorkTxt, 'Unit Price'));

        // Cleanup
        TestCleanup();
    end;

    [Test]
    [HandlerFunctions('SendNotificationHandler,RecallNotificationHandler')]
    [Scope('OnPrem')]
    procedure TestUpdateTriggerQuantityNothingToUpdate()
    var
        NotificationLifecycleMgt: Codeunit "Notification Lifecycle Mgt.";
        SalesInvoice: TestPage "Sales Invoice";
    begin
        // [GIVEN] a sales invoice having a user entered and an automatically generated line
        CreateSalesInvoiceWithGeneratedLine(SalesInvoice, false);

        // [WHEN] Quantity is changed on the user-entered line
        SalesInvoice.SalesLines.Quantity.SetValue(2);

        // [THEN] Line-regeneration is not started
        Assert.IsFalse(ChangeTriggeredCalled, StrSubstNo(TriggerShouldNotWorkTxt, 'Quantity'));

        // Cleanup
        TestCleanup();
        NotificationLifecycleMgt.RecallAllNotifications();
    end;

    [Test]
    [Scope('OnPrem')]
    procedure PostAutoGeneratedLineWithFullVAT()
    var
        SalesHeader: Record "Sales Header";
        SalesLine: Record "Sales Line";
        SplitVATPostingSetup: Record "VAT Posting Setup";
        InvoiceNo: Code[20];
    begin
        // [FEATURE] [Full VAT]
        // [SCENARIO 371812] Posting of Split VAT Entries for Full VAT Posting Setup
        Initialize();

        // [GIVEN] Sales Invoice with VAT Amount = "X". Split VAT line with 'Full VAT' in Split VAT Posting Setup.
        CreateSalesDocWithSplitVATLineFullVAT(SalesHeader, SalesLine, SalesHeader."Document Type"::Invoice);

        // [WHEN] Post Sales Invoice
        InvoiceNo := LibrarySales.PostSalesDocument(SalesHeader, true, true);

        // [THEN] VAT Entry created for Split VAT Posting Setup with Base = 0, Amount = "X"
        SalesHeader.GetVATPostingSetup(SplitVATPostingSetup, SalesLine);
        VerifyVATEntryForVATPostingSetup(
          SplitVATPostingSetup, InvoiceNo, 0, SalesLine."Amount Including VAT" - SalesLine.Amount);
    end;

    [Test]
    [HandlerFunctions('SalesDocumentTestReportRPH')]
    [Scope('OnPrem')]
    procedure PrintSalesDocumentTestReportAutoGeneratedLineWithFullVAT()
    var
        SalesHeader: Record "Sales Header";
        SalesLine: Record "Sales Line";
    begin
        // [FEATURE] [Full VAT] [Invoice]
        // [SCENARIO 376365] "Sales Document - Test" report should not print VAT Reversal line in the Invoice body section
        Initialize();

        // [GIVEN] Sales Invoice with split VAT line with Full VAT
        CreateSalesDocWithSplitVATLineFullVAT(SalesHeader, SalesLine, SalesHeader."Document Type"::Invoice);

        // [WHEN] Print "Sales Document - Test" Report
        RunSalesDocumentTestReport(SalesHeader."No.");

        // [THEN] Positive Invoice Line is shown in the Invoice body section (TFS 376365)
        // [THEN] Negative (VAT Reversal) Line is not shown in the Invoice body section (TFS 376365)
        // [THEN] Both VAT lines are shown in the VAT Amount Specification section (TFS 376615)
        // [THEN] VAT Amount line with VAT% = 0 has "Line Amount" = 0, "Inv. Disc. Base Amount" = 0 (TFS 376615)
        VerifySalesDocumentTestReport(SalesLine);
    end;

    [Test]
    [Scope('OnPrem')]
    procedure AddSplitVATLineWithFullVATWithEmptySalesLine()
    var
        SalesHeader: Record "Sales Header";
        SalesLine: Record "Sales Line";
        VATPostingSetup: Record "VAT Posting Setup";
    begin
        // [FEATURE] [Full VAT]
        // [SCENARIO 376113] Split VAT line should not be created for Sales Line when type is empty
        Initialize();

        // [GIVEN] Sales Invoice with Sales Line in Split VAT Posting Setup
        CreateVATPostingSetupForSplitVATFullVAT(VATPostingSetup);
        LibrarySplitVAT.CreateSalesDoc(SalesHeader, VATPostingSetup, SalesHeader."Document Type"::Invoice);

        // [GIVEN] new Sales Line with Type = empty
        SalesLine.Init();
        SalesLine."Document Type" := SalesHeader."Document Type";
        SalesLine."Document No." := SalesHeader."No.";
        SalesLine.Insert(true);

        // [WHEN] Split Sales line
        SalesHeader.AddSplitVATLines();

        // [THEN] Total count of Sales Lines is equal to 3 (2 initial lines and one split line)
        SalesLine.Reset();
        SalesLine.SetRange("Document Type", SalesHeader."Document Type");
        SalesLine.SetRange("Document No.", SalesHeader."No.");
        Assert.RecordCount(SalesLine, 3);

        // Cleanup
        TestCleanup();
    end;

    [Test]
    [HandlerFunctions('ServiceDocumentTestReportRPH')]
    [Scope('OnPrem')]
    procedure PrintServiceDocumentTestReportAutoGeneratedLineWithFullVAT()
    var
        ServiceHeader: Record "Service Header";
        ServiceLine: Record "Service Line";
    begin
        // [FEATURE] [Service] [Full VAT] [Invoice]
        // [SCENARIO 376310] "Service Document - Test" report should not print VAT Reversal line in the Invoice body section
        Initialize();

        // [GIVEN] Service Invoice with Split VAT line with Full VAT
        CreateServiceDocWithSplitVATLineFullVAT(ServiceHeader, ServiceLine, ServiceHeader."Document Type"::Invoice);

        // [WHEN] Print "Service Document - Test" Report
        RunServiceDocumentTestReport(ServiceHeader."No.");

        // [THEN] Positive Invoice Line is shown in the Invoice body section (TFS 376365)
        // [THEN] Negative (VAT Reversal) Line is not shown in the Invoice body section (TFS 376365)
        // [THEN] Both VAT lines are shown in the VAT Amount Specification section (TFS 376615)
        // [THEN] VAT Amount line with VAT% = 0 has "Line Amount" = 0, "Inv. Disc. Base Amount" = 0 (TFS 376615)
        VerifyServiceDocumentTestReport(ServiceLine);
    end;

    [Test]
    [HandlerFunctions('ServiceInvoiceReportRPH')]
    [Scope('OnPrem')]
    procedure PrintServiceInvoiceReportAutoGeneratedLineWithFullVAT()
    var
        ServiceHeader: Record "Service Header";
        ServiceLine: Record "Service Line";
        DocumentNo: Code[20];
    begin
        // [FEATURE] [Service] [Full VAT] [Invoice]
        // [SCENARIO 376310] "Service - Invoice" report should not print VAT Reversal line in the Invoice body section
        Initialize();

        // [GIVEN] Posted Service Invoice with Split VAT line with Full VAT
        CreateServiceDocWithSplitVATLineFullVAT(ServiceHeader, ServiceLine, ServiceHeader."Document Type"::Invoice);
        DocumentNo := PostServiceDocument(ServiceHeader);

        // [WHEN] Print "Service - Invoice" Report
        RunServiceInvoiceReport(DocumentNo);

        // [THEN] Positive Invoice Line is shown in the Invoice body section (TFS 376365)
        // [THEN] Negative (VAT Reversal) Line is not shown in the Invoice body section (TFS 376365)
        // [THEN] Both VAT lines are shown in the VAT Amount Specification section (TFS 376615)
        // [THEN] VAT Amount line with VAT% = 0 has "Line Amount" = 0, "Inv. Disc. Base Amount" = 0 (TFS 376615)
        VerifyServiceInvoiceReport(ServiceLine);
    end;

    [Test]
    [HandlerFunctions('ServiceCreditMemoReportRPH')]
    [Scope('OnPrem')]
    procedure PrintServiceCreditMemoReportAutoGeneratedLineWithFullVAT()
    var
        ServiceHeader: Record "Service Header";
        ServiceLine: Record "Service Line";
        DocumentNo: Code[20];
    begin
        // [FEATURE] [Service] [Full VAT] [Credit Memo]
        // [SCENARIO 376310] "Service - Credit Memo" report should not print VAT Reversal line in the Invoice body section
        Initialize();

        // [GIVEN] Posted Service Credit Memo with Split VAT line with Full VAT
        CreateServiceDocWithSplitVATLineFullVAT(ServiceHeader, ServiceLine, ServiceHeader."Document Type"::"Credit Memo");
        DocumentNo := PostServiceDocument(ServiceHeader);

        // [WHEN] Print "Service - Credit Memo" Report
        RunServiceCreditMemoReport(DocumentNo);

        // [THEN] Positive Invoice Line is shown in the Invoice body section (TFS 376365)
        // [THEN] Negative (VAT Reversal) Line is not shown in the Invoice body section (TFS 376365)
        // [THEN] Both VAT lines are shown in the VAT Amount Specification section (TFS 376615)
        // [THEN] VAT Amount line with VAT% = 0 has "Line Amount" = 0, "Inv. Disc. Base Amount" = 0 (TFS 376615)
        VerifyServiceCreditMemoReport(ServiceLine);
    end;

    [Test]
    [HandlerFunctions('SalesStatisticsPageHandler')]
    [Scope('OnPrem')]
    procedure SalesDocInvDiscountAfterSplitVATLine()
    var
        SalesHeader: Record "Sales Header";
        VATPostingSetup: Record "VAT Posting Setup";
        CustomerNo: Code[20];
        InvoiceDiscountAmount: Decimal;
    begin
        // [FEATURE] [Full VAT] [Discount]
        // [SCENARIO 379471] Inv. Discount Amount for Sales document should not be changed after Split VAT line
        Initialize();

        // [GIVEN] Enable SalesSetup Calc. Inv. Discount and Calc. Inv. Discount per VAT ID
        SetSalesSetupCalcInvDiscount();

        // [GIVEN] Split VAT Posting Setup
        CreateVATPostingSetupForSplitVATFullVAT(VATPostingSetup);

        // [GIVEN] Customer with invoice discount
        CustomerNo := CreateCustomerWithInvoiceDiscount(VATPostingSetup."VAT Bus. Posting Group");

        // [GIVEN] Sales Invoice with Sales Line
        InvoiceDiscountAmount := CreateSalesInvoiceForCustomer(SalesHeader, CustomerNo, VATPostingSetup);

        // [WHEN] Split Sales line
        SalesHeader.AddSplitVATLines();

        // [THEN] Inv. Discount Amount should not be changed
        // Verify using Service Statistics page handler
        LibraryVariableStorage.Enqueue(InvoiceDiscountAmount);
        SalesHeader.CalcInvDiscForHeader();
        PAGE.RunModal(PAGE::"Sales Statistics", SalesHeader);

        // Cleanup
        TestCleanup();
    end;

    [Test]
    [HandlerFunctions('ServiceStatisticsPageHandler')]
    [Scope('OnPrem')]
    procedure ServicesDocInvDiscountAfterSplitVATLine()
    var
        ServiceHeader: Record "Service Header";
        VATPostingSetup: Record "VAT Posting Setup";
        CustomerNo: Code[20];
        InvoiceDiscountAmount: Decimal;
    begin
        // [FEATURE] [Full VAT] [Service] [Discount]
        // [SCENARIO 379471] Inv. Discount Amount for Service document should not be changed after Split VAT line
        Initialize();

        // [GIVEN] Enable SalesSetup Calc. Inv. Discount and Calc. Inv. Discount per VAT ID
        SetSalesSetupCalcInvDiscount();

        // [GIVEN] Split VAT Posting Setup
        CreateVATPostingSetupForSplitVATFullVAT(VATPostingSetup);

        // [GIVEN] Customer with invoice discount
        CustomerNo := CreateCustomerWithInvoiceDiscount(VATPostingSetup."VAT Bus. Posting Group");

        // [GIVEN] Service Invoice with Service Line
        InvoiceDiscountAmount := CreateServiceInvoiceForCustomer(ServiceHeader, CustomerNo, VATPostingSetup);

        // [WHEN] Split Service line
        ServiceHeader.AddSplitVATLines();

        // [THEN] Inv. Discount Amount should not be changed
        // Verify using Service Statistics page handler
        LibraryVariableStorage.Enqueue(InvoiceDiscountAmount);
        ServiceHeader.CalcInvDiscForHeader();
        PAGE.RunModal(PAGE::"Service Statistics", ServiceHeader);

        // Cleanup
        TestCleanup();
    end;

    [Test]
    [Scope('OnPrem')]
    procedure CopyCrMemoFromPostedInvoice()
    var
        SalesHeader: Record "Sales Header";
        SalesInvoiceHeader: Record "Sales Invoice Header";
        CopyDocumentMgt: Codeunit "Copy Document Mgt.";
        GLAccountNo: Code[20];
    begin
        // [FEATURE] [Copy Document]
        // [SCENARIO 284528] The credit memo line copied from posted invoice where it was created by Generate Split VAT Lines has Automatically Generated = Yes
        Initialize();

        // [GIVEN] Create and post invoice with Split VAT line
        SalesInvoiceHeader.Get(
          CreatePostSalesDocWithSplitVATLineFullVAT(SalesHeader."Document Type"::Invoice, GLAccountNo));

        // [GIVEN] Create credit memo for same customer
        LibrarySales.CreateSalesHeader(
          SalesHeader, SalesHeader."Document Type"::"Credit Memo", SalesInvoiceHeader."Sell-to Customer No.");

        // [WHEN] Posted invoice is being copied to credit memo
        CopyDocumentMgt.CopySalesDoc("Sales Document Type From"::"Posted Invoice", SalesInvoiceHeader."No.", SalesHeader);

        // [THEN] Automatically Generated value has been copied
        VerifyCopiedSalesLine(SalesHeader, GLAccountNo);
    end;

    [Test]
    [Scope('OnPrem')]
    procedure CopyInvoiceFromPostedCrMemo()
    var
        SalesHeader: Record "Sales Header";
        SalesCrMemoHeader: Record "Sales Cr.Memo Header";
        CopyDocumentMgt: Codeunit "Copy Document Mgt.";
        GLAccountNo: Code[20];
    begin
        // [FEATURE] [Copy Document]
        // [SCENARIO 284528] The invoice line copied from posted credit memo where it was created by Generate Split VAT Lines has Automatically Generated = Yes
        Initialize();

        // [GIVEN] Create and post credit memo with Split VAT line
        SalesCrMemoHeader.Get(
          CreatePostSalesDocWithSplitVATLineFullVAT(SalesHeader."Document Type"::"Credit Memo", GLAccountNo));

        // [GIVEN] Create invoice for same customer
        LibrarySales.CreateSalesHeader(
          SalesHeader, SalesHeader."Document Type"::Invoice, SalesCrMemoHeader."Sell-to Customer No.");

        // [WHEN] Posted invoice is being copied to credit memo
        CopyDocumentMgt.CopySalesDoc("Sales Document Type From"::"Posted Credit Memo", SalesCrMemoHeader."No.", SalesHeader);

        // [THEN] Automatically Generated value has been copied
        VerifyCopiedSalesLine(SalesHeader, GLAccountNo);
    end;

    [Test]
    [Scope('OnPrem')]
    procedure GenerateSplitVATLinesDimensions()
    var
        SalesHeader: Record "Sales Header";
        SalesLine: Record "Sales Line";
        VATPostingSetup: Record "VAT Posting Setup";
        DimensionValue: array[2] of Record "Dimension Value";
        DimSetID: Integer;
        CombinedDimSetID: Integer;
        GLAccountNo: Code[20];
    begin
        // [FEATURE] [Dimensions]
        // [SCENARIO 284528] Sales line created by Generate Split VAT Lines function has dimensions copied from sales header and from split VAT Setup.Sales VAT Account
        Initialize();

        // [GIVEN] Create split VAT Posting Setup with Sales VAT Acctount "ACC"
        CreateVATPostingSetupForSplitVATFullVAT(VATPostingSetup);

        // [GIVEN] Add default dimension "DIM1" to G/L account "ACC"
        GLAccountNo := FindSplitVATPostingSetupSalesVATAccount(VATPostingSetup."VAT Bus. Posting Group");
        LibraryDimension.CreateDimWithDimValue(DimensionValue[1]);
        CreateGLAccountDefaultDim(GLAccountNo, DimensionValue[1]);

        // [GIVEN] Create sales invoice
        LibrarySplitVAT.CreateSalesHeader(SalesHeader, SalesHeader."Document Type"::Invoice, VATPostingSetup."VAT Bus. Posting Group");
        LibrarySplitVAT.CreateSalesLine(SalesLine, SalesHeader, VATPostingSetup."VAT Prod. Posting Group");

        // [GIVEN] Add dimension "DIM2" to sales header
        LibraryDimension.CreateDimWithDimValue(DimensionValue[2]);
        DimSetID := LibraryDimension.CreateDimSet(0, DimensionValue[2]."Dimension Code", DimensionValue[2].Code);
        SalesHeader.Validate("Dimension Set ID", DimSetID);
        SalesHeader.Modify(true);

        // [WHEN] Function Generate Split VAT Lines is being run
        SalesHeader.AddSplitVATLines();

        // [THEN] Created sales line has dimensions "DIM1" and "DIM2"
        CombinedDimSetID := LibraryDimension.CreateDimSet(DimSetID, DimensionValue[1]."Dimension Code", DimensionValue[1].Code);
        LibrarySplitVAT.FindSalesLine(SalesLine, SalesHeader, true);
        SalesLine.TestField("Dimension Set ID", CombinedDimSetID);
    end;

    [Test]
    [HandlerFunctions('ChangeTriggeredConfirmHandler')]
    [Scope('OnPrem')]
    procedure DeleteLineDeletesSplitVATLineSalesInvoice()
    var
        SalesHeader: Record "Sales Header";
        SalesLine: Record "Sales Line";
        VATPostingSetup: Record "VAT Posting Setup";
    begin
        // [FEATURE] [Full VAT] [Invoice] [Sales]
        // [SCENARIO 306691] Split VAT Sales Line gets deleted when the line it was generated from is deleted
        Initialize();

        // [GIVEN] Sales Invoice with Sales Line in Split VAT Posting Setup
        CreateVATPostingSetupForSplitVATFullVAT(VATPostingSetup);
        LibrarySplitVAT.CreateSalesDoc(SalesHeader, VATPostingSetup, SalesHeader."Document Type"::Invoice);

        // [GIVEN] Split VAT line was generated
        SalesHeader.AddSplitVATLines();

        // [WHEN] Delete Original Sales Line
        FindSalesLine(SalesLine, SalesHeader."Document Type", SalesHeader."No.", false);
        SalesLine.Delete(true);

        // [THEN] Split VAT Sales line also deleted
        SalesLine.SetRange("Automatically Generated", true);
        Assert.RecordIsEmpty(SalesLine);

        // Cleanup
        TestCleanup();
    end;

    [Test]
    [HandlerFunctions('ChangeTriggeredConfirmHandler')]
    [Scope('OnPrem')]
    procedure DeleteLineDeletesSplitVATLineSalesCrMemo()
    var
        SalesHeader: Record "Sales Header";
        SalesLine: Record "Sales Line";
        VATPostingSetup: Record "VAT Posting Setup";
    begin
        // [FEATURE] [Full VAT] [Credit Memo] [Sales]
        // [SCENARIO 306691] Split VAT Sales Line gets deleted when the line it was generated from is deleted
        Initialize();

        // [GIVEN] Sales Credit Memo with Sales Line in Split VAT Posting Setup
        CreateVATPostingSetupForSplitVATFullVAT(VATPostingSetup);
        LibrarySplitVAT.CreateSalesDoc(SalesHeader, VATPostingSetup, SalesHeader."Document Type"::"Credit Memo");

        // [GIVEN] Split VAT line was generated
        SalesHeader.AddSplitVATLines();

        // [WHEN] Delete Original Sales Line
        FindSalesLine(SalesLine, SalesHeader."Document Type", SalesHeader."No.", false);
        SalesLine.Delete(true);

        // [THEN] Split VAT Sales line also deleted
        SalesLine.SetRange("Automatically Generated", true);
        Assert.RecordIsEmpty(SalesLine);

        // Cleanup
        TestCleanup();
    end;

    [Test]
    [HandlerFunctions('ChangeTriggeredConfirmHandler')]
    [Scope('OnPrem')]
    procedure DeleteLineDeletesSplitVATLineServiceInvoice()
    var
        ServiceHeader: Record "Service Header";
        ServiceLine: Record "Service Line";
        VATPostingSetup: Record "VAT Posting Setup";
    begin
        // [FEATURE] [Full VAT] [Invoice] [Service]
        // [SCENARIO 306691] Split VAT Service Line gets deleted when the line it was generated from is deleted
        Initialize();

        // [GIVEN] Service Invoice with Service Line in Split VAT Posting Setup
        CreateVATPostingSetupForSplitVATFullVAT(VATPostingSetup);
        LibrarySplitVAT.CreateServiceDoc(ServiceHeader, VATPostingSetup, ServiceHeader."Document Type"::Invoice);

        // [GIVEN] Split VAT line was generated
        ServiceHeader.AddSplitVATLines();

        // [WHEN] Delete Original Service Line
        FindServiceLine(ServiceLine, ServiceHeader."Document Type", ServiceHeader."No.", false);
        ServiceLine.Delete(true);

        // [THEN] Split VAT Service line also deleted
        ServiceLine.SetRange("Automatically Generated", true);
        Assert.RecordIsEmpty(ServiceLine);

        // Cleanup
        TestCleanup();
    end;

    [Test]
    [HandlerFunctions('ChangeTriggeredConfirmHandler')]
    [Scope('OnPrem')]
    procedure DeleteLineDeletesSplitVATLineServiceCrMemo()
    var
        ServiceHeader: Record "Service Header";
        ServiceLine: Record "Service Line";
        VATPostingSetup: Record "VAT Posting Setup";
    begin
        // [FEATURE] [Full VAT] [Credit Memo] [Service]
        // [SCENARIO 306691] Split VAT Service Line gets deleted when the line it was generated from is deleted
        Initialize();

        // [GIVEN] Service Credit Memo with Service Line in Split VAT Posting Setup
        CreateVATPostingSetupForSplitVATFullVAT(VATPostingSetup);
        LibrarySplitVAT.CreateServiceDoc(ServiceHeader, VATPostingSetup, ServiceHeader."Document Type"::"Credit Memo");

        // [GIVEN] Split VAT line was generated
        ServiceHeader.AddSplitVATLines();

        // [WHEN] Delete Original Service Line
        FindServiceLine(ServiceLine, ServiceHeader."Document Type", ServiceHeader."No.", false);
        ServiceLine.Delete(true);

        // [THEN] Split VAT Service line also deleted
        ServiceLine.SetRange("Automatically Generated", true);
        Assert.RecordIsEmpty(ServiceLine);

        // Cleanup
        TestCleanup();
    end;

    [Test]
    [HandlerFunctions('ChangeTriggeredConfirmHandler')]
    [Scope('OnPrem')]
    procedure DeleteLineUpdatesSplitVATLineSalesInvoice()
    var
        SalesHeader: Record "Sales Header";
        SalesLine: Record "Sales Line";
        VATPostingSetup: Record "VAT Posting Setup";
        LineAmount: Decimal;
    begin
        // [FEATURE] [Full VAT] [Invoice] [Sales]
        // [SCENARIO 306691] Split VAT Sales Line gets updated with correct amount when there were two lines and one is deleted
        Initialize();

        // [GIVEN] Sales Invoice with 2 Sales Lines in Split VAT Posting Setup. Second Line has Amount = 10000, VAT is 10%
        CreateVATPostingSetupForSplitVATFullVAT(VATPostingSetup);
        LibrarySplitVAT.CreateSalesDoc(SalesHeader, VATPostingSetup, SalesHeader."Document Type"::Invoice);
        LineAmount := LibraryRandom.RandInt(10000);
        LibrarySplitVAT.AddSalesLine(SalesHeader, VATPostingSetup."VAT Prod. Posting Group", LineAmount);

        // [GIVEN] Split VAT line was generated
        SalesHeader.AddSplitVATLines();

        // [WHEN] Delete Original Sales Line
        FindSalesLine(SalesLine, SalesHeader."Document Type", SalesHeader."No.", false);
        SalesLine.Delete(true);

        // [THEN] Split VAT Sales line amount equals negative 10000 * 10 / 100 = -1000
        SalesLine.SetRange("Automatically Generated", true);
        SalesLine.FindFirst();
        SalesLine.TestField("Line Amount", -LineAmount * VATPostingSetup."VAT %" / 100);

        // Cleanup
        TestCleanup();
    end;

    [Test]
    [HandlerFunctions('ChangeTriggeredConfirmHandler')]
    [Scope('OnPrem')]
    procedure RecalculateSplitVATLineInSalesInvoiceForChangingType()
    var
        SalesHeader: Record "Sales Header";
        SalesLine: Record "Sales Line";
        VATPostingSetup: Record "VAT Posting Setup";
        SalesInvoiceSubform: TestPage "Sales Invoice Subform";
        OldUnitPrice: Decimal;
    begin
        // [FEATURE] [Split VAT]
        // [SCENARIO 333234] Sales line is created by Generate Split VAT Lines function. Field "Type" is changed in user's created line.
        Initialize();

        // [GIVEN] SplitVAT Sales line was automatically created with Unit Price
        OldUnitPrice := SetUpForRecalculateSplitVATInSalesInvoice(SalesHeader, SalesLine, SalesInvoiceSubform, VATPostingSetup);

        // [WHEN] Field "Type" is changed in Sales Line
        SalesInvoiceSubform.Type.SetValue(SalesLine.Type::"G/L Account");
        SalesInvoiceSubform.Close();
        LibraryNotificationMgt.RecallNotificationsForRecord(SalesLine);

        // [THEN] Value Amount in Split VAT Line was changed.
        LibrarySplitVAT.FindSalesLine(SalesLine, SalesHeader, true);
        Assert.AreNotEqual(SalesLine."Unit Price", OldUnitPrice, SalesLine.FieldCaption("Unit Price"));
        LibraryVariableStorage.AssertEmpty();
    end;

    [Test]
    [HandlerFunctions('ChangeTriggeredConfirmHandler')]
    [Scope('OnPrem')]
    procedure RecalculateSplitVATLineInSalesInvoiceForChangingNo()
    var
        SalesHeader: Record "Sales Header";
        SalesLine: Record "Sales Line";
        VATPostingSetup: Record "VAT Posting Setup";
        SalesInvoiceSubform: TestPage "Sales Invoice Subform";
        OldUnitPrice: Decimal;
    begin
        // [FEATURE] [Split VAT]
        // [SCENARIO 333234] Sales line is created by Generate Split VAT Lines function. Field "No" is changed in user's created line.
        Initialize();

        // [GIVEN] SplitVAT Sales line was automatically created with Unit Price
        OldUnitPrice := SetUpForRecalculateSplitVATInSalesInvoice(SalesHeader, SalesLine, SalesInvoiceSubform, VATPostingSetup);

        // [WHEN] Field "No" is changed in Sales Line
        SalesInvoiceSubform."No.".SetValue(
          LibraryInventory.CreateItemNoWithVATProdPostingGroup(VATPostingSetup."VAT Prod. Posting Group"));
        SalesInvoiceSubform.Close();
        LibraryNotificationMgt.RecallNotificationsForRecord(SalesLine);

        // [THEN] Value Amount in Split VAT Line was changed.
        LibrarySplitVAT.FindSalesLine(SalesLine, SalesHeader, true);
        Assert.AreNotEqual(SalesLine."Unit Price", OldUnitPrice, SalesLine.FieldCaption("Unit Price"));
        LibraryVariableStorage.AssertEmpty();
    end;

    [Test]
    [HandlerFunctions('ChangeTriggeredConfirmHandler')]
    [Scope('OnPrem')]
    procedure RecalculateSplitVATLineInSalesInvoiceForChangingQuantity()
    var
        SalesHeader: Record "Sales Header";
        SalesLine: Record "Sales Line";
        VATPostingSetup: Record "VAT Posting Setup";
        SalesInvoiceSubform: TestPage "Sales Invoice Subform";
        OldUnitPrice: Decimal;
    begin
        // [FEATURE] [Split VAT]
        // [SCENARIO 333234] Sales line is created by Generate Split VAT Lines function. Field "Quantity" is changed in user's created line.
        Initialize();

        // [GIVEN] SplitVAT Sales line was automatically created with Unit Price
        OldUnitPrice := SetUpForRecalculateSplitVATInSalesInvoice(SalesHeader, SalesLine, SalesInvoiceSubform, VATPostingSetup);

        // [WHEN] Field "Quantity" is changed in Sales Line
        SalesInvoiceSubform.Quantity.SetValue(SalesLine.Quantity * 2);
        SalesInvoiceSubform.Close();
        LibraryNotificationMgt.RecallNotificationsForRecord(SalesLine);

        // [THEN] Value Amount in Split VAT Line was changed.
        LibrarySplitVAT.FindSalesLine(SalesLine, SalesHeader, true);
        Assert.AreNotEqual(SalesLine."Unit Price", OldUnitPrice, SalesLine.FieldCaption("Unit Price"));
        LibraryVariableStorage.AssertEmpty();
    end;

    [Test]
    [HandlerFunctions('ChangeTriggeredConfirmHandler')]
    [Scope('OnPrem')]
    procedure RecalculateSplitVATLineInSalesInvoiceForChangingUnitMeasureCode()
    var
        SalesHeader: Record "Sales Header";
        SalesLine: Record "Sales Line";
        VATPostingSetup: Record "VAT Posting Setup";
        ItemUOM: Record "Item Unit of Measure";
        SalesInvoiceSubform: TestPage "Sales Invoice Subform";
        OldUnitPrice: Decimal;
    begin
        // [FEATURE] [Split VAT]
        // [SCENARIO 333234] Sales line is created by Generate Split VAT Lines function. Field "Unit of Measure Code" is changed in user's created line.
        Initialize();

        // [GIVEN] SplitVAT Sales line was automatically created with Unit Price
        OldUnitPrice := SetUpForRecalculateSplitVATInSalesInvoice(SalesHeader, SalesLine, SalesInvoiceSubform, VATPostingSetup);

        // [WHEN] Field "Unit of Measure Code" is changed in Sales Line
        LibraryInventory.CreateItemUnitOfMeasureCode(ItemUOM, SalesLine."No.", 2);
        SalesInvoiceSubform."Unit of Measure Code".SetValue(ItemUOM.Code);
        SalesInvoiceSubform.Close();
        LibraryNotificationMgt.RecallNotificationsForRecord(SalesLine);

        // [THEN] Value Amount in Split VAT Line was changed.
        LibrarySplitVAT.FindSalesLine(SalesLine, SalesHeader, true);
        Assert.AreNotEqual(SalesLine."Unit Price", OldUnitPrice, SalesLine.FieldCaption("Unit Price"));
        LibraryVariableStorage.AssertEmpty();
    end;

    [Test]
    [HandlerFunctions('ChangeTriggeredConfirmHandler')]
    [Scope('OnPrem')]
    procedure RecalculateSplitVATLineInSalesInvoiceForChangingUnitPrice()
    var
        SalesHeader: Record "Sales Header";
        SalesLine: Record "Sales Line";
        VATPostingSetup: Record "VAT Posting Setup";
        SalesInvoiceSubform: TestPage "Sales Invoice Subform";
        OldUnitPrice: Decimal;
    begin
        // [FEATURE] [Split VAT]
        // [SCENARIO 333234] Sales line is created by Generate Split VAT Lines function. Field "Unit Price" is changed in user's created line.
        Initialize();

        // [GIVEN] SplitVAT Sales line was automatically created with Unit Price
        OldUnitPrice := SetUpForRecalculateSplitVATInSalesInvoice(SalesHeader, SalesLine, SalesInvoiceSubform, VATPostingSetup);

        // [WHEN] Field "Unit Price" is changed in Sales Line
        SalesInvoiceSubform."Unit Price".SetValue(SalesLine."Unit Price" * 2);
        SalesInvoiceSubform.Close();
        LibraryNotificationMgt.RecallNotificationsForRecord(SalesLine);

        // [THEN] Value Amount in Split VAT Line was changed.
        LibrarySplitVAT.FindSalesLine(SalesLine, SalesHeader, true);
        Assert.AreNotEqual(SalesLine."Unit Price", OldUnitPrice, SalesLine.FieldCaption("Unit Price"));
        LibraryVariableStorage.AssertEmpty();
    end;

    [Test]
    [HandlerFunctions('ChangeTriggeredConfirmHandler')]
    [Scope('OnPrem')]
    procedure RecalculateSplitVATLineInSalesInvoiceForChangingLineDiscount()
    var
        SalesHeader: Record "Sales Header";
        SalesLine: Record "Sales Line";
        VATPostingSetup: Record "VAT Posting Setup";
        SalesInvoiceSubform: TestPage "Sales Invoice Subform";
        OldUnitPrice: Decimal;
    begin
        // [FEATURE] [Split VAT]
        // [SCENARIO 333234] Sales line is created by Generate Split VAT Lines function. Field "Line Discount %" is changed in user's created line.
        Initialize();

        // [GIVEN] SplitVAT Sales line was automatically created with Unit Price
        OldUnitPrice := SetUpForRecalculateSplitVATInSalesInvoice(SalesHeader, SalesLine, SalesInvoiceSubform, VATPostingSetup);

        // [WHEN] Field "Line Discount %" is changed in Sales Line
        SalesInvoiceSubform."Line Discount %".SetValue(LibraryRandom.RandIntInRange(10, 20));
        SalesInvoiceSubform.Close();
        LibraryNotificationMgt.RecallNotificationsForRecord(SalesLine);

        // [THEN] Value Amount in Split VAT Line was changed.
        LibrarySplitVAT.FindSalesLine(SalesLine, SalesHeader, true);
        Assert.AreNotEqual(SalesLine."Unit Price", OldUnitPrice, SalesLine.FieldCaption("Unit Price"));
        LibraryVariableStorage.AssertEmpty();
    end;

    [Test]
    [HandlerFunctions('ChangeTriggeredConfirmHandler')]
    [Scope('OnPrem')]
    procedure RecalculateSplitVATLineInSalesInvoiceForChangingLineAmount()
    var
        SalesHeader: Record "Sales Header";
        SalesLine: Record "Sales Line";
        VATPostingSetup: Record "VAT Posting Setup";
        SalesInvoiceSubform: TestPage "Sales Invoice Subform";
        OldUnitPrice: Decimal;
    begin
        // [FEATURE] [Split VAT]
        // [SCENARIO 333234] Sales line is created by Generate Split VAT Lines function. Field "Line Amount" is changed in user's created line.
        Initialize();

        // [GIVEN] SplitVAT Sales line was automatically created with Unit Price
        OldUnitPrice := SetUpForRecalculateSplitVATInSalesInvoice(SalesHeader, SalesLine, SalesInvoiceSubform, VATPostingSetup);

        // [WHEN] Field "Line Amount" is changed in Sales Line
        SalesInvoiceSubform."Line Amount".SetValue(LibraryRandom.RandIntInRange(10, 20));
        SalesInvoiceSubform.Close();
        LibraryNotificationMgt.RecallNotificationsForRecord(SalesLine);

        // [THEN] Value Amount in Split VAT Line was changed.
        LibrarySplitVAT.FindSalesLine(SalesLine, SalesHeader, true);
        Assert.AreNotEqual(SalesLine."Unit Price", OldUnitPrice, SalesLine.FieldCaption("Unit Price"));
        LibraryVariableStorage.AssertEmpty();
    end;

    [Test]
    [HandlerFunctions('ChangeTriggeredConfirmHandler')]
    [Scope('OnPrem')]
    procedure RecalculateSplitVATLineInSalesCrMemoForChangingType()
    var
        SalesHeader: Record "Sales Header";
        SalesLine: Record "Sales Line";
        VATPostingSetup: Record "VAT Posting Setup";
        SalesCrMemoSubform: TestPage "Sales Cr. Memo Subform";
        OldUnitPrice: Decimal;
    begin
        // [FEATURE] [Split VAT]
        // [SCENARIO 333234] Sales line is created by Generate Split VAT Lines function. Field "Type" is changed in user's created line.
        Initialize();

        // [GIVEN] SplitVAT Sales line was automatically created with Unit Price
        OldUnitPrice := SetUpForRecalculateSplitVATInSalesCrMemo(SalesHeader, SalesLine, SalesCrMemoSubform, VATPostingSetup);

        // [WHEN] Field "Type" is changed in Sales Line
        SalesCrMemoSubform.Type.SetValue(SalesLine.Type::"G/L Account");
        SalesCrMemoSubform.Close();
        LibraryNotificationMgt.RecallNotificationsForRecord(SalesLine);

        // [THEN] Value Amount in Split VAT Line was changed.
        LibrarySplitVAT.FindSalesLine(SalesLine, SalesHeader, true);
        Assert.AreNotEqual(SalesLine."Unit Price", OldUnitPrice, SalesLine.FieldCaption("Unit Price"));
        LibraryVariableStorage.AssertEmpty();
    end;

    [Test]
    [HandlerFunctions('ChangeTriggeredConfirmHandler')]
    [Scope('OnPrem')]
    procedure RecalculateSplitVATLineInSalesCrMemoForChangingNo()
    var
        SalesHeader: Record "Sales Header";
        SalesLine: Record "Sales Line";
        VATPostingSetup: Record "VAT Posting Setup";
        SalesCrMemoSubform: TestPage "Sales Cr. Memo Subform";
        OldUnitPrice: Decimal;
    begin
        // [FEATURE] [Split VAT]
        // [SCENARIO 333234] Sales line is created by Generate Split VAT Lines function. Field "No" is changed in user's created line.
        Initialize();

        // [GIVEN] SplitVAT Sales line was automatically created with Unit Price
        OldUnitPrice := SetUpForRecalculateSplitVATInSalesCrMemo(SalesHeader, SalesLine, SalesCrMemoSubform, VATPostingSetup);

        // [WHEN] Field "No" is changed in Sales Line
        SalesCrMemoSubform."No.".SetValue(
          LibraryInventory.CreateItemNoWithVATProdPostingGroup(VATPostingSetup."VAT Prod. Posting Group"));
        SalesCrMemoSubform.Close();
        LibraryNotificationMgt.RecallNotificationsForRecord(SalesLine);

        // [THEN] Value Amount in Split VAT Line was changed.
        LibrarySplitVAT.FindSalesLine(SalesLine, SalesHeader, true);
        Assert.AreNotEqual(SalesLine."Unit Price", OldUnitPrice, SalesLine.FieldCaption("Unit Price"));
        LibraryVariableStorage.AssertEmpty();
    end;

    [Test]
    [HandlerFunctions('ChangeTriggeredConfirmHandler')]
    [Scope('OnPrem')]
    procedure RecalculateSplitVATLineInSalesCrMemoForChangingQuantity()
    var
        SalesHeader: Record "Sales Header";
        SalesLine: Record "Sales Line";
        VATPostingSetup: Record "VAT Posting Setup";
        SalesCrMemoSubform: TestPage "Sales Cr. Memo Subform";
        OldUnitPrice: Decimal;
    begin
        // [FEATURE] [Split VAT]
        // [SCENARIO 333234] Sales line is created by Generate Split VAT Lines function. Field "Quantity" is changed in user's created line.
        Initialize();

        // [GIVEN] SplitVAT Sales line was automatically created with Unit Price
        OldUnitPrice := SetUpForRecalculateSplitVATInSalesCrMemo(SalesHeader, SalesLine, SalesCrMemoSubform, VATPostingSetup);

        // [WHEN] Field "Quantity" is changed in Sales Line
        SalesCrMemoSubform.Quantity.SetValue(SalesLine.Quantity * 2);
        SalesCrMemoSubform.Close();
        LibraryNotificationMgt.RecallNotificationsForRecord(SalesLine);

        // [THEN] Value Amount in Split VAT Line was changed.
        LibrarySplitVAT.FindSalesLine(SalesLine, SalesHeader, true);
        Assert.AreNotEqual(SalesLine."Unit Price", OldUnitPrice, SalesLine.FieldCaption("Unit Price"));
        LibraryVariableStorage.AssertEmpty();
    end;

    [Test]
    [HandlerFunctions('ChangeTriggeredConfirmHandler')]
    [Scope('OnPrem')]
    procedure RecalculateSplitVATLineInSalesCrMemoForChangingUnitMeasureCode()
    var
        SalesHeader: Record "Sales Header";
        SalesLine: Record "Sales Line";
        VATPostingSetup: Record "VAT Posting Setup";
        ItemUOM: Record "Item Unit of Measure";
        SalesCrMemoSubform: TestPage "Sales Cr. Memo Subform";
        OldUnitPrice: Decimal;
    begin
        // [FEATURE] [Split VAT]
        // [SCENARIO 333234] Sales line is created by Generate Split VAT Lines function. Field "Unit of Measure Code" is changed in user's created line.
        Initialize();

        // [GIVEN] SplitVAT Sales line was automatically created with Unit Price
        OldUnitPrice := SetUpForRecalculateSplitVATInSalesCrMemo(SalesHeader, SalesLine, SalesCrMemoSubform, VATPostingSetup);

        // [WHEN] Field "Unit of Measure Code" is changed in Sales Line
        LibraryInventory.CreateItemUnitOfMeasureCode(ItemUOM, SalesLine."No.", 2);
        SalesCrMemoSubform."Unit of Measure Code".SetValue(ItemUOM.Code);
        SalesCrMemoSubform.Close();
        LibraryNotificationMgt.RecallNotificationsForRecord(SalesLine);

        // [THEN] Value Amount in Split VAT Line was changed.
        LibrarySplitVAT.FindSalesLine(SalesLine, SalesHeader, true);
        Assert.AreNotEqual(SalesLine."Unit Price", OldUnitPrice, SalesLine.FieldCaption("Unit Price"));
        LibraryVariableStorage.AssertEmpty();
    end;

    [Test]
    [HandlerFunctions('ChangeTriggeredConfirmHandler')]
    [Scope('OnPrem')]
    procedure RecalculateSplitVATLineInSalesCrMemoForChangingUnitPrice()
    var
        SalesHeader: Record "Sales Header";
        SalesLine: Record "Sales Line";
        VATPostingSetup: Record "VAT Posting Setup";
        SalesCrMemoSubform: TestPage "Sales Cr. Memo Subform";
        OldUnitPrice: Decimal;
    begin
        // [FEATURE] [Split VAT]
        // [SCENARIO 333234] Sales line is created by Generate Split VAT Lines function. Field "Unit Price" is changed in user's created line.
        Initialize();

        // [GIVEN] SplitVAT Sales line was automatically created with Unit Price
        OldUnitPrice := SetUpForRecalculateSplitVATInSalesCrMemo(SalesHeader, SalesLine, SalesCrMemoSubform, VATPostingSetup);

        // [WHEN] Field "Unit Price" is changed in Sales Line
        SalesCrMemoSubform."Unit Price".SetValue(SalesLine."Unit Price" * 2);
        SalesCrMemoSubform.Close();
        LibraryNotificationMgt.RecallNotificationsForRecord(SalesLine);

        // [THEN] Value Amount in Split VAT Line was changed.
        LibrarySplitVAT.FindSalesLine(SalesLine, SalesHeader, true);
        Assert.AreNotEqual(SalesLine."Unit Price", OldUnitPrice, SalesLine.FieldCaption("Unit Price"));
        LibraryVariableStorage.AssertEmpty();
    end;

    [Test]
    [HandlerFunctions('ChangeTriggeredConfirmHandler')]
    [Scope('OnPrem')]
    procedure RecalculateSplitVATLineInSalesCrMemoForChangingLineDiscount()
    var
        SalesHeader: Record "Sales Header";
        SalesLine: Record "Sales Line";
        VATPostingSetup: Record "VAT Posting Setup";
        SalesCrMemoSubform: TestPage "Sales Cr. Memo Subform";
        OldUnitPrice: Decimal;
    begin
        // [FEATURE] [Split VAT]
        // [SCENARIO 333234] Sales line is created by Generate Split VAT Lines function. Field "Line Discount %" is changed in user's created line.
        Initialize();

        // [GIVEN] SplitVAT Sales line was automatically created with Unit Price
        OldUnitPrice := SetUpForRecalculateSplitVATInSalesCrMemo(SalesHeader, SalesLine, SalesCrMemoSubform, VATPostingSetup);

        // [WHEN] Field "Line Discount %" is changed in Sales Line
        SalesCrMemoSubform."Line Discount %".SetValue(LibraryRandom.RandIntInRange(10, 20));
        SalesCrMemoSubform.Close();
        LibraryNotificationMgt.RecallNotificationsForRecord(SalesLine);

        // [THEN] Value Amount in Split VAT Line was changed.
        LibrarySplitVAT.FindSalesLine(SalesLine, SalesHeader, true);
        Assert.AreNotEqual(SalesLine."Unit Price", OldUnitPrice, SalesLine.FieldCaption("Unit Price"));
        LibraryVariableStorage.AssertEmpty();
    end;

    [Test]
    [HandlerFunctions('ChangeTriggeredConfirmHandler')]
    [Scope('OnPrem')]
    procedure RecalculateSplitVATLineInSalesCrMemoForChangingLineAmount()
    var
        SalesHeader: Record "Sales Header";
        SalesLine: Record "Sales Line";
        VATPostingSetup: Record "VAT Posting Setup";
        SalesCrMemoSubform: TestPage "Sales Cr. Memo Subform";
        OldUnitPrice: Decimal;
    begin
        // [FEATURE] [Split VAT]
        // [SCENARIO 333234] Sales line is created by Generate Split VAT Lines function. Field "Line Amount" is changed in user's created line.
        Initialize();

        // [GIVEN] SplitVAT Sales line was automatically created with Unit Price
        OldUnitPrice := SetUpForRecalculateSplitVATInSalesCrMemo(SalesHeader, SalesLine, SalesCrMemoSubform, VATPostingSetup);

        // [WHEN] Field "Line Amount" is changed in Sales Line
        SalesCrMemoSubform."Line Amount".SetValue(LibraryRandom.RandIntInRange(10, 20));
        SalesCrMemoSubform.Close();
        LibraryNotificationMgt.RecallNotificationsForRecord(SalesLine);

        // [THEN] Value Amount in Split VAT Line was changed.
        LibrarySplitVAT.FindSalesLine(SalesLine, SalesHeader, true);
        Assert.AreNotEqual(SalesLine."Unit Price", OldUnitPrice, SalesLine.FieldCaption("Unit Price"));
        LibraryVariableStorage.AssertEmpty();
    end;

    [Test]
    [HandlerFunctions('ChangeTriggeredConfirmHandler')]
    [Scope('OnPrem')]
    procedure RecalculateSplitVATLineInServiceInvoiceForChangingType()
    var
        ServiceHeader: Record "Service Header";
        ServiceLine: Record "Service Line";
        VATPostingSetup: Record "VAT Posting Setup";
        ServiceInvoiceSubform: TestPage "Service Invoice Subform";
        OldUnitPrice: Decimal;
    begin
        // [FEATURE] [Split VAT]
        // [SCENARIO 333234] Service line is created by Generate Split VAT Lines function. Field "Type" is changed in user's created line.
        Initialize();

        // [GIVEN] SplitVAT Service line was automatically created with Unit Price
        OldUnitPrice := SetUpForRecalculateSplitVATInServiceInvoice(ServiceHeader, ServiceLine, ServiceInvoiceSubform, VATPostingSetup);

        // [WHEN] Field "Type" is changed in Service Line
        ServiceInvoiceSubform.Type.SetValue(ServiceLine.Type::"G/L Account");
        ServiceInvoiceSubform.Close();
        LibraryNotificationMgt.RecallNotificationsForRecord(ServiceLine);

        // [THEN] Value Amount in Split VAT Line was changed.
        LibrarySplitVAT.FindServiceLine(ServiceLine, ServiceHeader, true);
        Assert.AreNotEqual(ServiceLine."Unit Price", OldUnitPrice, ServiceLine.FieldCaption("Unit Price"));
        LibraryVariableStorage.AssertEmpty();
    end;

    [Test]
    [HandlerFunctions('ChangeTriggeredConfirmHandler')]
    [Scope('OnPrem')]
    procedure RecalculateSplitVATLineInServiceInvoiceForChangingNo()
    var
        ServiceHeader: Record "Service Header";
        ServiceLine: Record "Service Line";
        VATPostingSetup: Record "VAT Posting Setup";
        ServiceInvoiceSubform: TestPage "Service Invoice Subform";
        OldUnitPrice: Decimal;
    begin
        // [FEATURE] [Split VAT]
        // [SCENARIO 333234] Service line is created by Generate Split VAT Lines function. Field "No" is changed in user's created line.
        Initialize();

        // [GIVEN] SplitVAT Service line was automatically created with Unit Price
        OldUnitPrice := SetUpForRecalculateSplitVATInServiceInvoice(ServiceHeader, ServiceLine, ServiceInvoiceSubform, VATPostingSetup);

        // [WHEN] Field "No" is changed in Service Line
        ServiceInvoiceSubform."No.".SetValue(
          LibraryInventory.CreateItemNoWithVATProdPostingGroup(VATPostingSetup."VAT Prod. Posting Group"));
        ServiceInvoiceSubform.Close();
        LibraryNotificationMgt.RecallNotificationsForRecord(ServiceLine);

        // [THEN] Value Amount in Split VAT Line was changed.
        LibrarySplitVAT.FindServiceLine(ServiceLine, ServiceHeader, true);
        Assert.AreNotEqual(ServiceLine."Unit Price", OldUnitPrice, ServiceLine.FieldCaption("Unit Price"));
        LibraryVariableStorage.AssertEmpty();
    end;

    [Test]
    [HandlerFunctions('ChangeTriggeredConfirmHandler')]
    [Scope('OnPrem')]
    procedure RecalculateSplitVATLineInServiceInvoiceForChangingQuantity()
    var
        ServiceHeader: Record "Service Header";
        ServiceLine: Record "Service Line";
        VATPostingSetup: Record "VAT Posting Setup";
        ServiceInvoiceSubform: TestPage "Service Invoice Subform";
        OldUnitPrice: Decimal;
    begin
        // [FEATURE] [Split VAT]
        // [SCENARIO 333234] Service line is created by Generate Split VAT Lines function. Field "Quantity" is changed in user's created line.
        Initialize();

        // [GIVEN] SplitVAT Service line was automatically created with Unit Price
        OldUnitPrice := SetUpForRecalculateSplitVATInServiceInvoice(ServiceHeader, ServiceLine, ServiceInvoiceSubform, VATPostingSetup);

        // [WHEN] Field "Quantity" is changed in Service Line
        ServiceInvoiceSubform.Quantity.SetValue(ServiceLine.Quantity * 2);
        ServiceInvoiceSubform.Close();
        LibraryNotificationMgt.RecallNotificationsForRecord(ServiceLine);

        // [THEN] Value Amount in Split VAT Line was changed.
        LibrarySplitVAT.FindServiceLine(ServiceLine, ServiceHeader, true);
        Assert.AreNotEqual(ServiceLine."Unit Price", OldUnitPrice, ServiceLine.FieldCaption("Unit Price"));
        LibraryVariableStorage.AssertEmpty();
    end;

    [Test]
    [HandlerFunctions('ChangeTriggeredConfirmHandler')]
    [Scope('OnPrem')]
    procedure RecalculateSplitVATLineInServiceInvoiceForChangingUnitMeasureCode()
    var
        ServiceHeader: Record "Service Header";
        ServiceLine: Record "Service Line";
        VATPostingSetup: Record "VAT Posting Setup";
        ItemUOM: Record "Item Unit of Measure";
        ServiceInvoiceSubform: TestPage "Service Invoice Subform";
        OldUnitPrice: Decimal;
    begin
        // [FEATURE] [Split VAT]
        // [SCENARIO 333234] Service line is created by Generate Split VAT Lines function. Field "Unit of Measure Code" is changed in user's created line.
        Initialize();

        // [GIVEN] SplitVAT Service line was automatically created with Unit Price
        OldUnitPrice := SetUpForRecalculateSplitVATInServiceInvoice(ServiceHeader, ServiceLine, ServiceInvoiceSubform, VATPostingSetup);

        // [WHEN] Field "Unit of Measure Code" is changed in Service Line
        LibraryInventory.CreateItemUnitOfMeasureCode(ItemUOM, ServiceLine."No.", 2);
        ServiceInvoiceSubform."Unit of Measure Code".SetValue(ItemUOM.Code);
        ServiceInvoiceSubform.Close();
        LibraryNotificationMgt.RecallNotificationsForRecord(ServiceLine);

        // [THEN] Value Amount in Split VAT Line was changed.
        LibrarySplitVAT.FindServiceLine(ServiceLine, ServiceHeader, true);
        Assert.AreNotEqual(ServiceLine."Unit Price", OldUnitPrice, ServiceLine.FieldCaption("Unit Price"));
        LibraryVariableStorage.AssertEmpty();
    end;

    [Test]
    [HandlerFunctions('ChangeTriggeredConfirmHandler')]
    [Scope('OnPrem')]
    procedure RecalculateSplitVATLineInServiceInvoiceForChangingUnitPrice()
    var
        ServiceHeader: Record "Service Header";
        ServiceLine: Record "Service Line";
        VATPostingSetup: Record "VAT Posting Setup";
        ServiceInvoiceSubform: TestPage "Service Invoice Subform";
        OldUnitPrice: Decimal;
    begin
        // [FEATURE] [Split VAT]
        // [SCENARIO 333234] Service line is created by Generate Split VAT Lines function. Field "Unit Price" is changed in user's created line.
        Initialize();

        // [GIVEN] SplitVAT Service line was automatically created with Unit Price
        OldUnitPrice := SetUpForRecalculateSplitVATInServiceInvoice(ServiceHeader, ServiceLine, ServiceInvoiceSubform, VATPostingSetup);

        // [WHEN] Field "Unit Price" is changed in Service Line
        ServiceInvoiceSubform."Unit Price".SetValue(ServiceLine."Unit Price" * 2);
        ServiceInvoiceSubform.Close();
        LibraryNotificationMgt.RecallNotificationsForRecord(ServiceLine);

        // [THEN] Value Amount in Split VAT Line was changed.
        LibrarySplitVAT.FindServiceLine(ServiceLine, ServiceHeader, true);
        Assert.AreNotEqual(ServiceLine."Unit Price", OldUnitPrice, ServiceLine.FieldCaption("Unit Price"));
        LibraryVariableStorage.AssertEmpty();
    end;

    [Test]
    [HandlerFunctions('ChangeTriggeredConfirmHandler')]
    [Scope('OnPrem')]
    procedure RecalculateSplitVATLineInServiceInvoiceForChangingLineDiscount()
    var
        ServiceHeader: Record "Service Header";
        ServiceLine: Record "Service Line";
        VATPostingSetup: Record "VAT Posting Setup";
        ServiceInvoiceSubform: TestPage "Service Invoice Subform";
        OldUnitPrice: Decimal;
    begin
        // [FEATURE] [Split VAT]
        // [SCENARIO 333234] Service line is created by Generate Split VAT Lines function. Field "Line Discount %" is changed in user's created line.
        Initialize();

        // [GIVEN] SplitVAT Service line was automatically created with Unit Price
        OldUnitPrice := SetUpForRecalculateSplitVATInServiceInvoice(ServiceHeader, ServiceLine, ServiceInvoiceSubform, VATPostingSetup);

        // [WHEN] Field "Line Discount %" is changed in Service Line
        ServiceInvoiceSubform."Line Discount %".SetValue(LibraryRandom.RandIntInRange(10, 20));
        ServiceInvoiceSubform.Close();
        LibraryNotificationMgt.RecallNotificationsForRecord(ServiceLine);

        // [THEN] Value Amount in Split VAT Line was changed.
        LibrarySplitVAT.FindServiceLine(ServiceLine, ServiceHeader, true);
        Assert.AreNotEqual(ServiceLine."Unit Price", OldUnitPrice, ServiceLine.FieldCaption("Unit Price"));
        LibraryVariableStorage.AssertEmpty();
    end;

    [Test]
    [HandlerFunctions('ChangeTriggeredConfirmHandler')]
    [Scope('OnPrem')]
    procedure RecalculateSplitVATLineInServiceInvoiceForChangingLineAmount()
    var
        ServiceHeader: Record "Service Header";
        ServiceLine: Record "Service Line";
        VATPostingSetup: Record "VAT Posting Setup";
        ServiceInvoiceSubform: TestPage "Service Invoice Subform";
        OldUnitPrice: Decimal;
    begin
        // [FEATURE] [Split VAT]
        // [SCENARIO 333234] Service line is created by Generate Split VAT Lines function. Field "Line Amount" is changed in user's created line.
        Initialize();

        // [GIVEN] SplitVAT Service line was automatically created with Unit Price
        OldUnitPrice := SetUpForRecalculateSplitVATInServiceInvoice(ServiceHeader, ServiceLine, ServiceInvoiceSubform, VATPostingSetup);

        // [WHEN] Field "Line Amount" is changed in Service Line
        ServiceInvoiceSubform."Line Amount".SetValue(LibraryRandom.RandIntInRange(10, 20));
        ServiceInvoiceSubform.Close();
        LibraryNotificationMgt.RecallNotificationsForRecord(ServiceLine);

        // [THEN] Value Amount in Split VAT Line was changed.
        LibrarySplitVAT.FindServiceLine(ServiceLine, ServiceHeader, true);
        Assert.AreNotEqual(ServiceLine."Unit Price", OldUnitPrice, ServiceLine.FieldCaption("Unit Price"));
        LibraryVariableStorage.AssertEmpty();
    end;

    [Test]
    [HandlerFunctions('ChangeTriggeredConfirmHandler')]
    [Scope('OnPrem')]
    procedure RecalculateSplitVATLineInServiceCrMemoForChangingType()
    var
        ServiceHeader: Record "Service Header";
        ServiceLine: Record "Service Line";
        VATPostingSetup: Record "VAT Posting Setup";
        ServiceCreditMemoSubform: TestPage "Service Credit Memo Subform";
        OldUnitPrice: Decimal;
    begin
        // [FEATURE] [Split VAT]
        // [SCENARIO 333234] Service line is created by Generate Split VAT Lines function. Field "Type" is changed in user's created line.
        Initialize();

        // [GIVEN] SplitVAT Service line was automatically created with Unit Price
        OldUnitPrice := SetUpForRecalculateSplitVATInServiceCrMemo(ServiceHeader, ServiceLine, ServiceCreditMemoSubform, VATPostingSetup);

        // [WHEN] Field "Type" is changed in Service Line
        ServiceCreditMemoSubform.Type.SetValue(ServiceLine.Type::"G/L Account");
        ServiceCreditMemoSubform.Close();
        LibraryNotificationMgt.RecallNotificationsForRecord(ServiceLine);

        // [THEN] Value Amount in Split VAT Line was changed.
        LibrarySplitVAT.FindServiceLine(ServiceLine, ServiceHeader, true);
        Assert.AreNotEqual(ServiceLine."Unit Price", OldUnitPrice, ServiceLine.FieldCaption("Unit Price"));
        LibraryVariableStorage.AssertEmpty();
    end;

    [Test]
    [HandlerFunctions('ChangeTriggeredConfirmHandler')]
    [Scope('OnPrem')]
    procedure RecalculateSplitVATLineInServiceCrMemoForChangingNo()
    var
        ServiceHeader: Record "Service Header";
        ServiceLine: Record "Service Line";
        VATPostingSetup: Record "VAT Posting Setup";
        ServiceCreditMemoSubform: TestPage "Service Credit Memo Subform";
        OldUnitPrice: Decimal;
    begin
        // [FEATURE] [Split VAT]
        // [SCENARIO 333234] Service line is created by Generate Split VAT Lines function. Field "No" is changed in user's created line.
        Initialize();

        // [GIVEN] SplitVAT Service line was automatically created with Unit Price
        OldUnitPrice := SetUpForRecalculateSplitVATInServiceCrMemo(ServiceHeader, ServiceLine, ServiceCreditMemoSubform, VATPostingSetup);

        // [WHEN] Field "No" is changed in Service Line
        ServiceCreditMemoSubform."No.".SetValue(
          LibraryInventory.CreateItemNoWithVATProdPostingGroup(VATPostingSetup."VAT Prod. Posting Group"));
        ServiceCreditMemoSubform.Close();
        LibraryNotificationMgt.RecallNotificationsForRecord(ServiceLine);

        // [THEN] Value Amount in Split VAT Line was changed.
        LibrarySplitVAT.FindServiceLine(ServiceLine, ServiceHeader, true);
        Assert.AreNotEqual(ServiceLine."Unit Price", OldUnitPrice, ServiceLine.FieldCaption("Unit Price"));
        LibraryVariableStorage.AssertEmpty();
    end;

    [Test]
    [HandlerFunctions('ChangeTriggeredConfirmHandler')]
    [Scope('OnPrem')]
    procedure RecalculateSplitVATLineInServiceCrMemoForChangingQuantity()
    var
        ServiceHeader: Record "Service Header";
        ServiceLine: Record "Service Line";
        VATPostingSetup: Record "VAT Posting Setup";
        ServiceCreditMemoSubform: TestPage "Service Credit Memo Subform";
        OldUnitPrice: Decimal;
    begin
        // [FEATURE] [Split VAT]
        // [SCENARIO 333234] Service line is created by Generate Split VAT Lines function. Field "Quantity" is changed in user's created line.
        Initialize();

        // [GIVEN] SplitVAT Service line was automatically created with Unit Price
        OldUnitPrice := SetUpForRecalculateSplitVATInServiceCrMemo(ServiceHeader, ServiceLine, ServiceCreditMemoSubform, VATPostingSetup);

        // [WHEN] Field "Quantity" is changed in Service Line
        ServiceCreditMemoSubform.Quantity.SetValue(ServiceLine.Quantity * 2);
        ServiceCreditMemoSubform.Close();
        LibraryNotificationMgt.RecallNotificationsForRecord(ServiceLine);

        // [THEN] Value Amount in Split VAT Line was changed.
        LibrarySplitVAT.FindServiceLine(ServiceLine, ServiceHeader, true);
        Assert.AreNotEqual(ServiceLine."Unit Price", OldUnitPrice, ServiceLine.FieldCaption("Unit Price"));
        LibraryVariableStorage.AssertEmpty();
    end;

    [Test]
    [HandlerFunctions('ChangeTriggeredConfirmHandler')]
    [Scope('OnPrem')]
    procedure RecalculateSplitVATLineInServiceCrMemoForChangingUnitMeasureCode()
    var
        ServiceHeader: Record "Service Header";
        ServiceLine: Record "Service Line";
        VATPostingSetup: Record "VAT Posting Setup";
        ItemUOM: Record "Item Unit of Measure";
        ServiceCreditMemoSubform: TestPage "Service Credit Memo Subform";
        OldUnitPrice: Decimal;
    begin
        // [FEATURE] [Split VAT]
        // [SCENARIO 333234] Service line is created by Generate Split VAT Lines function. Field "Unit of Measure Code" is changed in user's created line.
        Initialize();

        // [GIVEN] SplitVAT Service line was automatically created with Unit Price
        OldUnitPrice := SetUpForRecalculateSplitVATInServiceCrMemo(ServiceHeader, ServiceLine, ServiceCreditMemoSubform, VATPostingSetup);

        // [WHEN] Field "Unit of Measure Code" is changed in Service Line
        LibraryInventory.CreateItemUnitOfMeasureCode(ItemUOM, ServiceLine."No.", 2);
        ServiceCreditMemoSubform."Unit of Measure Code".SetValue(ItemUOM.Code);
        ServiceCreditMemoSubform.Close();
        LibraryNotificationMgt.RecallNotificationsForRecord(ServiceLine);

        // [THEN] Value Amount in Split VAT Line was changed.
        LibrarySplitVAT.FindServiceLine(ServiceLine, ServiceHeader, true);
        Assert.AreNotEqual(ServiceLine."Unit Price", OldUnitPrice, ServiceLine.FieldCaption("Unit Price"));
        LibraryVariableStorage.AssertEmpty();
    end;

    [Test]
    [HandlerFunctions('ChangeTriggeredConfirmHandler')]
    [Scope('OnPrem')]
    procedure RecalculateSplitVATLineInServiceCrMemoForChangingUnitPrice()
    var
        ServiceHeader: Record "Service Header";
        ServiceLine: Record "Service Line";
        VATPostingSetup: Record "VAT Posting Setup";
        ServiceCreditMemoSubform: TestPage "Service Credit Memo Subform";
        OldUnitPrice: Decimal;
    begin
        // [FEATURE] [Split VAT]
        // [SCENARIO 333234] Service line is created by Generate Split VAT Lines function. Field "Unit Price" is changed in user's created line.
        Initialize();

        // [GIVEN] SplitVAT Service line was automatically created with Unit Price
        OldUnitPrice := SetUpForRecalculateSplitVATInServiceCrMemo(ServiceHeader, ServiceLine, ServiceCreditMemoSubform, VATPostingSetup);

        // [WHEN] Field "Unit Price" is changed in Service Line
        ServiceCreditMemoSubform."Unit Price".SetValue(ServiceLine."Unit Price" * 2);
        ServiceCreditMemoSubform.Close();
        LibraryNotificationMgt.RecallNotificationsForRecord(ServiceLine);

        // [THEN] Value Amount in Split VAT Line was changed.
        LibrarySplitVAT.FindServiceLine(ServiceLine, ServiceHeader, true);
        Assert.AreNotEqual(ServiceLine."Unit Price", OldUnitPrice, ServiceLine.FieldCaption("Unit Price"));
        LibraryVariableStorage.AssertEmpty();
    end;

    [Test]
    [HandlerFunctions('ChangeTriggeredConfirmHandler')]
    [Scope('OnPrem')]
    procedure RecalculateSplitVATLineInServiceCrMemoForChangingLineDiscount()
    var
        ServiceHeader: Record "Service Header";
        ServiceLine: Record "Service Line";
        VATPostingSetup: Record "VAT Posting Setup";
        ServiceCreditMemoSubform: TestPage "Service Credit Memo Subform";
        OldUnitPrice: Decimal;
    begin
        // [FEATURE] [Split VAT]
        // [SCENARIO 333234] Service line is created by Generate Split VAT Lines function. Field "Line Discount %" is changed in user's created line.
        Initialize();

        // [GIVEN] SplitVAT Service line was automatically created with Unit Price
        OldUnitPrice := SetUpForRecalculateSplitVATInServiceCrMemo(ServiceHeader, ServiceLine, ServiceCreditMemoSubform, VATPostingSetup);

        // [WHEN] Field "Line Discount %" is changed in Service Line
        ServiceCreditMemoSubform."Line Discount %".SetValue(LibraryRandom.RandIntInRange(10, 20));
        ServiceCreditMemoSubform.Close();
        LibraryNotificationMgt.RecallNotificationsForRecord(ServiceLine);

        // [THEN] Value Amount in Split VAT Line was changed.
        LibrarySplitVAT.FindServiceLine(ServiceLine, ServiceHeader, true);
        Assert.AreNotEqual(ServiceLine."Unit Price", OldUnitPrice, ServiceLine.FieldCaption("Unit Price"));
        LibraryVariableStorage.AssertEmpty();
    end;

    [Test]
    [HandlerFunctions('ChangeTriggeredConfirmHandler')]
    [Scope('OnPrem')]
    procedure RecalculateSplitVATLineInServiceCrMemoForChangingLineAmount()
    var
        ServiceHeader: Record "Service Header";
        ServiceLine: Record "Service Line";
        VATPostingSetup: Record "VAT Posting Setup";
        ServiceCreditMemoSubform: TestPage "Service Credit Memo Subform";
        OldUnitPrice: Decimal;
    begin
        // [FEATURE] [Split VAT]
        // [SCENARIO 333234] Service line is created by Generate Split VAT Lines function. Field "Line Amount" is changed in user's created line.
        Initialize();

        // [GIVEN] SplitVAT Service line was automatically created with Unit Price
        OldUnitPrice := SetUpForRecalculateSplitVATInServiceCrMemo(ServiceHeader, ServiceLine, ServiceCreditMemoSubform, VATPostingSetup);

        // [WHEN] Field "Line Amount" is changed in Service Line
        ServiceCreditMemoSubform."Line Amount".SetValue(LibraryRandom.RandIntInRange(10, 20));
        ServiceCreditMemoSubform.Close();
        LibraryNotificationMgt.RecallNotificationsForRecord(ServiceLine);

        // [THEN] Value Amount in Split VAT Line was changed.
        LibrarySplitVAT.FindServiceLine(ServiceLine, ServiceHeader, true);
        Assert.AreNotEqual(ServiceLine."Unit Price", OldUnitPrice, ServiceLine.FieldCaption("Unit Price"));
        LibraryVariableStorage.AssertEmpty();
    end;

    [Test]
    [Scope('OnPrem')]
    procedure GenerateServiceSplitVATLinesDimensions()
    var
        ServiceHeader: Record "Service Header";
        ServiceLine: Record "Service Line";
        VATPostingSetup: Record "VAT Posting Setup";
        DimensionValue: Record "Dimension Value";
    begin
        // [FEATURE] [Service] [Dimensions]
        // [SCENARIO 345497] Service Line created by Generate Split VAT Lines function has dimensions copied from Service Header
        Initialize();

        // [GIVEN] Created split VAT Posting Setup
        CreateVATPostingSetupForSplitVATFullVAT(VATPostingSetup);

        // [GIVEN] Created Service Invoice with a Service Line
        LibrarySplitVAT.CreateServiceDoc(ServiceHeader, VATPostingSetup, ServiceHeader."Document Type"::Invoice);
        LibrarySplitVAT.CreateServiceLine(ServiceLine, ServiceHeader, VATPostingSetup."VAT Prod. Posting Group");

        // [GIVEN] Assign dimension to the Service Header
        LibraryDimension.CreateDimWithDimValue(DimensionValue);
        ServiceHeader.Validate("Dimension Set ID", LibraryDimension.CreateDimSet(0, DimensionValue."Dimension Code", DimensionValue.Code));
        ServiceHeader.Modify(true);

        // [WHEN] Function Generate Split VAT Lines is being run
        ServiceHeader.AddSplitVATLines();

        // [THEN] Created Service Line has the same "Dimension Set ID" as its Service Header
        LibrarySplitVAT.FindServiceLine(ServiceLine, ServiceHeader, true);
        ServiceLine.TestField("Dimension Set ID", ServiceHeader."Dimension Set ID");
    end;

    [Test]
    [Scope('OnPrem')]
    procedure GenerateServiceSplitVATLinesWorkDate()
    var
        ServiceHeader: Record "Service Header";
        ServiceLine: Record "Service Line";
        VATPostingSetup: Record "VAT Posting Setup";
        PostingDate: Date;
    begin
        // [FEATURE] [Service]
        // [SCENARIO 377189] Service Line created by Generate Split VAT Lines function has Posting Date that is copied from Service Header.
        Initialize();

        // [GIVEN] Split VAT Posting Setup.
        CreateVATPostingSetupForSplitVATFullVAT(VATPostingSetup);

        // [GIVEN] Service Invoice with Posting Date = 'D1'.
        // [GIVEN] Service Invoice has Service Line.
        LibrarySplitVAT.CreateServiceDoc(ServiceHeader, VATPostingSetup, ServiceHeader."Document Type"::Invoice);
        PostingDate := LibraryRandom.RandDate(10);
        UpdatePostingDateOnServiceHeader(ServiceHeader, PostingDate);
        LibrarySplitVAT.CreateServiceLine(ServiceLine, ServiceHeader, VATPostingSetup."VAT Prod. Posting Group");

        // [WHEN] Run function Generate Split VAT Lines.
        ServiceHeader.AddSplitVATLines();

        // [THEN] Created Service Line has the same Posting Date as Service Header.
        LibrarySplitVAT.FindServiceLine(ServiceLine, ServiceHeader, true);
        ServiceHeader.TestField("Posting Date", PostingDate);
        ServiceLine.TestField("Posting Date", PostingDate);
    end;

    [Test]
    [Scope('OnPrem')]
    procedure PostServiceInvoiceWithServiceSplitVATLinesWhenAllowPostingDatesSet()
    var
        ServiceHeader: Record "Service Header";
        ServiceLine: Record "Service Line";
        VATPostingSetup: Record "VAT Posting Setup";
        ServiceInvoiceHeader: Record "Service Invoice Header";
    begin
        // [FEATURE] [Service]
        // [SCENARIO 377189] Service Line created by Generate Split VAT Lines function has Posting Date that is copied from Service Header.
        Initialize();

        // [GIVEN] Posting is allowed within +-20 days period from WorkDate.
        LibraryERM.SetAllowPostingFromTo(CalcDate('<-20D>', WorkDate()), CalcDate('<20D>', WorkDate()));

        // [GIVEN] Split VAT Posting Setup.
        CreateVATPostingSetupForSplitVATFullVAT(VATPostingSetup);

        // [GIVEN] Service Invoice with Posting Date = WorkDate() + 10 days.
        // [GIVEN] Service Invoice has Service Line.
        LibrarySplitVAT.CreateServiceDoc(ServiceHeader, VATPostingSetup, ServiceHeader."Document Type"::Invoice);
        UpdatePostingDateOnServiceHeader(ServiceHeader, LibraryRandom.RandDate(10));
        LibrarySplitVAT.CreateServiceLine(ServiceLine, ServiceHeader, VATPostingSetup."VAT Prod. Posting Group");

        // [GIVEN] Split VAT Line is generated for Service Invoice.
        ServiceHeader.AddSplitVATLines();

        // [WHEN] Post Service Invoice.
        LibraryService.PostServiceOrder(ServiceHeader, true, false, true);

        // [THEN] Service Invoice is posted.
        LibraryService.FindServiceInvoiceHeader(ServiceInvoiceHeader, ServiceHeader."No.");
    end;

    local procedure Initialize()
    begin
        Clear(LibraryReportDataset);
        LibraryVariableStorage.Clear();
        LibrarySetupStorage.Restore();

        if IsInitialized then
            exit;

        IsInitialized := true;
        Commit();
        LibrarySetupStorage.Save(DATABASE::"Sales & Receivables Setup");
    end;

    local procedure AddSalesLines(SalesHeader: Record "Sales Header")
    var
        SplitVATTest: Record "Split VAT Test";
    begin
        if SplitVATTest.FindSet() then
            repeat
                LibrarySplitVAT.AddSalesLine(SalesHeader, SplitVATTest."VAT Prod. Post Group", SplitVATTest."Amount Excl. VAT");
            until SplitVATTest.Next() = 0;
    end;

    local procedure CreateCustomerWithInvoiceDiscount(VATBusPostingGroupCode: Code[20]): Code[20]
    var
        Customer: Record Customer;
        CustInvoiceDisc: Record "Cust. Invoice Disc.";
    begin
        Customer.Get(
          LibrarySales.CreateCustomerWithVATBusPostingGroup(VATBusPostingGroupCode));
        LibraryERM.CreateInvDiscForCustomer(CustInvoiceDisc, Customer."No.", '', 0);
        CustInvoiceDisc.Validate("Discount %", LibraryRandom.RandIntInRange(3, 5));
        CustInvoiceDisc.Modify(true);

        exit(Customer."No.");
    end;

    local procedure CreateGLAccountDefaultDim(GLAccountNo: Code[20]; DimensionValue: Record "Dimension Value")
    var
        DefaultDimension: Record "Default Dimension";
    begin
        LibraryDimension.CreateDefaultDimension(
          DefaultDimension, DATABASE::"G/L Account", GLAccountNo, DimensionValue."Dimension Code", DimensionValue.Code);
    end;

    local procedure CreateSalesInvoiceForCustomer(var SalesHeader: Record "Sales Header"; CustomerNo: Code[20]; VATPostingSetup: Record "VAT Posting Setup"): Decimal
    var
        SalesLine: Record "Sales Line";
    begin
        LibrarySales.CreateSalesHeader(SalesHeader, SalesHeader."Document Type"::Invoice, CustomerNo);
        LibrarySplitVAT.CreateSalesLine(SalesLine, SalesHeader, VATPostingSetup."VAT Prod. Posting Group");
        CODEUNIT.Run(CODEUNIT::"Sales-Calc. Discount", SalesLine);
        exit(SalesLine."Inv. Discount Amount");
    end;

    local procedure CreateSalesInvoice(var SalesHeader: Record "Sales Header"; VATPostingSetup: Record "VAT Posting Setup")
    begin
        LibrarySplitVAT.CreateSalesHeader(SalesHeader, SalesHeader."Document Type"::Invoice, VATPostingSetup."VAT Bus. Posting Group");
        AddSalesLines(SalesHeader);
    end;

    [HandlerFunctions('ChangeTriggeredConfirmHandler')]
    local procedure CreateSalesInvoiceWithGeneratedLine(var SalesInvoice: TestPage "Sales Invoice"; GenerateLines: Boolean)
    var
        SplitVATPostingSetup: Record "VAT Posting Setup";
        VATPostingSetup10: Record "VAT Posting Setup";
        SalesHeader: Record "Sales Header";
    begin
        // Creating a sales invoice having a user entered and an automatically generated line
        LibrarySplitVAT.CreateVATPostingSetupForSplitVAT(VATPostingSetup10, SplitVATPostingSetup, 10);
        InitializeSplitVATTestLine(VATPostingSetup10, 100);
        CreateSalesInvoice(SalesHeader, VATPostingSetup10);
        SalesInvoice.OpenEdit();
        SalesInvoice.FILTER.SetFilter("No.", SalesHeader."No.");

        if GenerateLines then
            SalesInvoice.GenerateSplitVATLines.Invoke();
    end;

    local procedure CreateSalesDocWithSplitVATLineFullVAT(var SalesHeader: Record "Sales Header"; var SalesLine: Record "Sales Line"; DocumentType: Enum "Sales Document Type")
    var
        VATPostingSetup: Record "VAT Posting Setup";
    begin
        CreateVATPostingSetupForSplitVATFullVAT(VATPostingSetup);
        LibrarySplitVAT.CreateSalesDoc(SalesHeader, VATPostingSetup, DocumentType);
        SalesHeader.AddSplitVATLines();
        LibrarySplitVAT.FindSalesLine(SalesLine, SalesHeader, false);
    end;

    local procedure CreateServiceDocWithSplitVATLineFullVAT(var ServiceHeader: Record "Service Header"; var ServiceLine: Record "Service Line"; DocumentType: Enum "Service Document Type")
    var
        VATPostingSetup: Record "VAT Posting Setup";
    begin
        CreateVATPostingSetupForSplitVATFullVAT(VATPostingSetup);
        LibrarySplitVAT.CreateServiceDoc(ServiceHeader, VATPostingSetup, DocumentType);
        ServiceHeader.AddSplitVATLines();
        LibrarySplitVAT.FindServiceLine(ServiceLine, ServiceHeader, false);
    end;

    local procedure CreateServiceInvoiceForCustomer(var ServiceHeader: Record "Service Header"; CustomerNo: Code[20]; VATPostingSetup: Record "VAT Posting Setup"): Decimal
    var
        ServiceLine: Record "Service Line";
    begin
        LibraryService.CreateServiceHeader(ServiceHeader, ServiceHeader."Document Type"::Invoice, CustomerNo);
        LibrarySplitVAT.CreateServiceLine(ServiceLine, ServiceHeader, VATPostingSetup."VAT Prod. Posting Group");
        ServiceHeader.CalcInvDiscForHeader();
        ServiceLine.Find();
        exit(ServiceLine."Inv. Discount Amount");
    end;

    local procedure CreateVATPostingSetup(var VATPostingSetup: Record "VAT Posting Setup"; VATPercentage: Decimal)
    var
        SplitVATPostingSetup: Record "VAT Posting Setup";
    begin
        LibrarySplitVAT.CreateVATPostingSetupForSplitVAT(VATPostingSetup, SplitVATPostingSetup, VATPercentage);
    end;

    local procedure CreateVATPostingSetupUsingGroup(var VATPostingSetup: Record "VAT Posting Setup"; VATPercentage: Integer; VATBusinessPostingGroupCode: Code[20])
    var
        SplitVATPostingSetup: Record "VAT Posting Setup";
    begin
        Clear(VATPostingSetup);
        Clear(SplitVATPostingSetup);
        VATPostingSetup."VAT Bus. Posting Group" := VATBusinessPostingGroupCode;
        LibrarySplitVAT.CreateVATPostingSetupForSplitVAT(VATPostingSetup, SplitVATPostingSetup, VATPercentage);
    end;

    local procedure CreateVATPostingSetupForSplitVATFullVAT(var VATPostingSetup: Record "VAT Posting Setup")
    var
        SplitVATPostingSetup: Record "VAT Posting Setup";
    begin
        LibrarySplitVAT.CreateVATPostingSetupForSplitVAT(
          VATPostingSetup, SplitVATPostingSetup, LibraryRandom.RandIntInRange(10, 20));
        LibrarySplitVAT.UpdateVATPostingSetupFullVAT(SplitVATPostingSetup);
    end;

    local procedure CreatePostSalesDocWithSplitVATLineFullVAT(DocumentType: Enum "Sales Document Type"; var GLAccountNo: Code[20]): Code[20]
    var
        SalesHeader: Record "Sales Header";
        SalesLine: Record "Sales Line";
        VATPostingSetup: Record "VAT Posting Setup";
    begin
        CreateVATPostingSetupForSplitVATFullVAT(VATPostingSetup);
        LibrarySplitVAT.CreateSalesHeader(SalesHeader, DocumentType, VATPostingSetup."VAT Bus. Posting Group");
        LibrarySplitVAT.CreateSalesLine(SalesLine, SalesHeader, VATPostingSetup."VAT Prod. Posting Group");
        SalesHeader.AddSplitVATLines();
        LibrarySplitVAT.FindSalesLine(SalesLine, SalesHeader, true);
        GLAccountNo := SalesLine."No.";
        exit(LibrarySales.PostSalesDocument(SalesHeader, true, true));
    end;

    local procedure PostServiceDocument(ServiceHeader: Record "Service Header"): Code[20]
    begin
        LibraryService.PostServiceOrder(ServiceHeader, false, false, false);
        with ServiceHeader do
            case "Document Type" of
                "Document Type"::Invoice:
                    exit(FindServiceInvHeaderNo("No.", "Customer No."));
                "Document Type"::"Credit Memo":
                    exit(FindServiceCrMemoHeaderNo("No.", "Customer No."));
                else
                    exit('');
            end;
    end;

    local procedure ExecuteLineGenerator(SalesHeader: Record "Sales Header")
    var
        SalesInvoice: TestPage "Sales Invoice";
    begin
        SalesInvoice.OpenEdit();
        SalesInvoice.FILTER.SetFilter("No.", SalesHeader."No.");
        SalesInvoice.GenerateSplitVATLines.Invoke();
    end;

    local procedure InitializeSplitVATTestLine(VATPostingSetup: Record "VAT Posting Setup"; AmountExcludingVAT: Decimal)
    var
        SplitVATTest: Record "Split VAT Test";
    begin
        SplitVATTest.Init();
        SplitVATTest."Amount Excl. VAT" := AmountExcludingVAT;
        SplitVATTest."VAT %" := VATPostingSetup."VAT %";
        SplitVATTest."VAT Bus. Post. Group" := VATPostingSetup."VAT Bus. Posting Group";
        SplitVATTest."VAT Prod. Post Group" := VATPostingSetup."VAT Prod. Posting Group";
        SplitVATTest."VAT Amount" := AmountExcludingVAT * VATPostingSetup."VAT %" / 100;
        SplitVATTest.Insert();
    end;

    local procedure RetrieveAndVerifySalesLineParameters(SalesHeader: Record "Sales Header"; VATPostingSetup: Record "VAT Posting Setup"; ExpectedVATAmount: Decimal)
    var
        SalesLine: Record "Sales Line";
        SplitVATPostingSetup: Record "VAT Posting Setup";
    begin
        SetSalesLineFilters(SalesLine, SalesHeader, VATPostingSetup, false);
        SalesLine.FindFirst();
        SalesHeader.GetVATPostingSetup(SplitVATPostingSetup, SalesLine);

        SetSalesLineFilters(SalesLine, SalesHeader, SplitVATPostingSetup, true);
        Assert.RecordCount(SalesLine, 1);
        SalesLine.FindFirst();
        Assert.AreEqual(ExpectedVATAmount, SalesLine.Amount, WrongLineAmountTxt);

        Assert.AreEqual(SalesLine.Type::"G/L Account", SalesLine.Type, 'Unexpected line type.');
        Assert.AreEqual(SplitVATPostingSetup."Sales VAT Account", SalesLine."No.", 'Unexpected line No.');
        Assert.AreEqual(SalesHeader."Document Type", SalesLine."Document Type", 'Unexpected document type.');
        Assert.AreEqual(SalesHeader."No.", SalesLine."Document No.", 'Unexpected document number.');
        Assert.AreEqual(SalesHeader."Sell-to Customer No.", SalesLine."Sell-to Customer No.", 'Unexpected Sell-to Customer No.');
        Assert.AreEqual(-1, SalesLine.Quantity, 'Unexpected Quantity.');
    end;

    local procedure SetSalesLineFilters(var SalesLine: Record "Sales Line"; SalesHeader: Record "Sales Header"; VATPostingSetup: Record "VAT Posting Setup"; AutomaticallyCreated: Boolean)
    begin
        with SalesLine do begin
            SetRange("Document Type", SalesHeader."Document Type");
            SetRange("Document No.", SalesHeader."No.");
            SetRange("VAT Bus. Posting Group", VATPostingSetup."VAT Bus. Posting Group");
            SetRange("VAT Prod. Posting Group", VATPostingSetup."VAT Prod. Posting Group");
            SetRange("Automatically Generated", AutomaticallyCreated);
        end;
    end;

    local procedure SetSalesSetupCalcInvDiscount()
    var
        SalesSetup: Record "Sales & Receivables Setup";
    begin
        with SalesSetup do begin
            Get();
            "Calc. Inv. Discount" := true;
            "Calc. Inv. Disc. per VAT ID" := true;
            Modify();
        end;
    end;

    local procedure FindServiceInvHeaderNo(OriginalDocNo: Code[20]; CustomerNo: Code[20]): Code[20]
    var
        ServiceInvoiceHeader: Record "Service Invoice Header";
    begin
        with ServiceInvoiceHeader do begin
            SetRange("Pre-Assigned No.", OriginalDocNo);
            SetRange("Customer No.", CustomerNo);
            FindFirst();
            exit("No.");
        end;
    end;

    local procedure FindServiceCrMemoHeaderNo(OriginalDocNo: Code[20]; CustomerNo: Code[20]): Code[20]
    var
        ServiceCrMemoHeader: Record "Service Cr.Memo Header";
    begin
        with ServiceCrMemoHeader do begin
            SetRange("Pre-Assigned No.", OriginalDocNo);
            SetRange("Customer No.", CustomerNo);
            FindFirst();
            exit("No.");
        end;
    end;

    local procedure FindSplitVATPostingSetupSalesVATAccount(VATBusPostingGroup: Code[20]): Code[20]
    var
        VATPostingSetup: Record "VAT Posting Setup";
    begin
        VATPostingSetup.SetRange("VAT Bus. Posting Group", VATBusPostingGroup);
        VATPostingSetup.SetRange("VAT Calculation Type", VATPostingSetup."VAT Calculation Type"::"Full VAT");
        VATPostingSetup.FindFirst();
        exit(VATPostingSetup."Sales VAT Account");
    end;

    local procedure FindSalesLine(var SalesLine: Record "Sales Line"; DocumentType: Enum "Sales Document Type"; DocumentNo: Code[20]; AutomaticallyGenerated: Boolean)
    begin
        SalesLine.SetRange("Document Type", DocumentType);
        SalesLine.SetRange("Document No.", DocumentNo);
        SalesLine.SetRange("Automatically Generated", AutomaticallyGenerated);
        SalesLine.FindFirst();
    end;

    local procedure FindServiceLine(var ServiceLine: Record "Service Line"; DocumentType: Enum "Service Document Type"; DocumentNo: Code[20]; AutomaticallyGenerated: Boolean)
    begin
        ServiceLine.SetRange("Document Type", DocumentType);
        ServiceLine.SetRange("Document No.", DocumentNo);
        ServiceLine.SetRange("Automatically Generated", AutomaticallyGenerated);
        ServiceLine.FindFirst();
    end;

    local procedure RunSalesDocumentTestReport(DocumentNo: Code[20])
    begin
        Commit();
        LibraryVariableStorage.Enqueue(DocumentNo);
        REPORT.Run(REPORT::"Sales Document - Test");
    end;

    local procedure RunServiceDocumentTestReport(DocumentNo: Code[20])
    begin
        Commit();
        LibraryVariableStorage.Enqueue(DocumentNo);
        REPORT.Run(REPORT::"Service Document - Test");
    end;

    local procedure RunServiceInvoiceReport(DocumentNo: Code[20])
    begin
        Commit();
        LibraryVariableStorage.Enqueue(DocumentNo);
        REPORT.Run(REPORT::"Service - Invoice");
    end;

    local procedure RunServiceCreditMemoReport(DocumentNo: Code[20])
    begin
        Commit();
        LibraryVariableStorage.Enqueue(DocumentNo);
        REPORT.Run(REPORT::"Service - Credit Memo");
    end;

    local procedure UpdatePostingDateOnServiceHeader(var ServiceHeader: Record "Service Header"; PostingDate: Date)
    begin
        ServiceHeader.Validate("Posting Date", PostingDate);
        ServiceHeader.Modify(true);
    end;

    local procedure VerifyVATEntryForVATPostingSetup(VATPostingSetup: Record "VAT Posting Setup"; DocumentNo: Code[20]; ExpectedBase: Decimal; ExpectedAmount: Decimal)
    var
        VATEntry: Record "VAT Entry";
    begin
        with VATEntry do begin
            SetRange("Document No.", DocumentNo);
            SetRange("VAT Bus. Posting Group", VATPostingSetup."VAT Bus. Posting Group");
            SetRange("VAT Prod. Posting Group", VATPostingSetup."VAT Prod. Posting Group");
            FindFirst();
            TestField(Base, ExpectedBase);
            TestField(Amount, ExpectedAmount);
            TestField("VAT Calculation Type", VATPostingSetup."VAT Calculation Type");
        end;
    end;

    local procedure VerifyReportElementValue(FindElementName: Text; FindElementValue: Decimal; AssertElementName: Text; AssertElementValue: Variant)
    begin
        LibraryReportDataset.Reset();
        LibraryReportDataset.MoveToRow(LibraryReportDataset.FindRow(FindElementName, FindElementValue) + 1);
        LibraryReportDataset.AssertCurrentRowValueEquals(AssertElementName, AssertElementValue);
    end;

    local procedure VerifySalesDocumentTestReport(SalesLine: Record "Sales Line")
    begin
        LibraryReportDataset.LoadDataSetFile();
        with SalesLine do begin
            VerifyReportElementValue('Sales_Line__Quantity', Quantity, 'SalesLineHidden', '0');
            VerifyReportElementValue('Sales_Line__Quantity', -1, 'SalesLineHidden', '1');
            VerifyReportElementValue('VATAmountLine__VAT___', "VAT %", 'VATAmountLine__VAT_Amount_', "Amount Including VAT" - Amount);
            VerifyReportElementValue('VATAmountLine__VAT___', "VAT %", 'VATAmountLine__Line_Amount_', Amount);
            VerifyReportElementValue('VATAmountLine__VAT___', "VAT %", 'VATAmountLine__Inv__Disc__Base_Amount_', Amount);
            VerifyReportElementValue('VATAmountLine__VAT___', 0, 'VATAmountLine__VAT_Amount_', -("Amount Including VAT" - Amount));
            VerifyReportElementValue('VATAmountLine__VAT___', 0, 'VATAmountLine__Line_Amount_', 0);
            VerifyReportElementValue('VATAmountLine__VAT___', 0, 'VATAmountLine__Inv__Disc__Base_Amount_', 0);
        end;
    end;

    local procedure VerifySalesInvoiceReport(SalesLine: Record "Sales Line")
    begin
        LibraryReportDataset.LoadDataSetFile();
        with SalesLine do begin
            VerifyReportElementValue('Quantity_SalesInvLine', Quantity, 'SalesInvLineHidden', '0');
            VerifyReportElementValue('Quantity_SalesInvLine', -1, 'SalesInvLineHidden', '1');
            VerifyReportElementValue('VATAmountLineVAT', "VAT %", 'VATAmountLineVATAmount', "Amount Including VAT" - Amount);
            VerifyReportElementValue('VATAmountLineVAT', "VAT %", 'VATAmountLineLineAmount', Amount);
            VerifyReportElementValue('VATAmountLineVAT', "VAT %", 'VATAmtLineInvDiscBaseAmt', Amount);
            VerifyReportElementValue('VATAmountLineVAT', 0, 'VATAmountLineVATAmount', -("Amount Including VAT" - Amount));
            VerifyReportElementValue('VATAmountLineVAT', 0, 'VATAmountLineLineAmount', 0);
            VerifyReportElementValue('VATAmountLineVAT', 0, 'VATAmtLineInvDiscBaseAmt', 0);
        end;
    end;

    local procedure VerifySalesCreditMemoReport(SalesLine: Record "Sales Line")
    begin
        LibraryReportDataset.LoadDataSetFile();
        with SalesLine do begin
            VerifyReportElementValue('Qty_SalesCrMemoLine', Quantity, 'SalesCrMemoLineHidden', '0');
            VerifyReportElementValue('Qty_SalesCrMemoLine', -1, 'SalesCrMemoLineHidden', '1');
            VerifyReportElementValue('VATAmtLineVAT', "VAT %", 'VATAmtLineVATAmt', "Amount Including VAT" - Amount);
            VerifyReportElementValue('VATAmtLineVAT', "VAT %", 'VATAmtLineLineAmt', Amount);
            VerifyReportElementValue('VATAmtLineVAT', "VAT %", 'VATAmtLineInvDiscBaseAmt', Amount);
            VerifyReportElementValue('VATAmtLineVAT', 0, 'VATAmtLineVATAmt', -("Amount Including VAT" - Amount));
            VerifyReportElementValue('VATAmtLineVAT', 0, 'VATAmtLineLineAmt', 0);
            VerifyReportElementValue('VATAmtLineVAT', 0, 'VATAmtLineInvDiscBaseAmt', 0);
        end;
    end;

    local procedure VerifyServiceDocumentTestReport(ServiceLine: Record "Service Line")
    begin
        LibraryReportDataset.LoadDataSetFile();
        with ServiceLine do begin
            VerifyReportElementValue('Service_Line__Quantity', Quantity, 'ServiceLineHidden', '0');
            VerifyReportElementValue('Service_Line__Quantity', -1, 'ServiceLineHidden', '1');
            VerifyReportElementValue('VATAmountLine__VAT___', "VAT %", 'VATAmountLine__VAT_Amount_', "Amount Including VAT" - Amount);
            VerifyReportElementValue('VATAmountLine__VAT___', "VAT %", 'VATAmountLine__Line_Amount_', Amount);
            VerifyReportElementValue('VATAmountLine__VAT___', "VAT %", 'VATAmountLine__Inv__Disc__Base_Amount_', Amount);
            VerifyReportElementValue('VATAmountLine__VAT___', 0, 'VATAmountLine__VAT_Amount_', -("Amount Including VAT" - Amount));
            VerifyReportElementValue('VATAmountLine__VAT___', 0, 'VATAmountLine__Line_Amount_', 0);
            VerifyReportElementValue('VATAmountLine__VAT___', 0, 'VATAmountLine__Inv__Disc__Base_Amount_', 0);
        end;
    end;

    local procedure VerifyServiceInvoiceReport(ServiceLine: Record "Service Line")
    begin
        LibraryReportDataset.LoadDataSetFile();
        with ServiceLine do begin
            VerifyReportElementValue('Qty_ServInvLine', Quantity, 'ServiceLineHidden', '0');
            VerifyReportElementValue('Qty_ServInvLine', -1, 'ServiceLineHidden', '1');
            VerifyReportElementValue('VATAmtLineVAT', "VAT %", 'VATAmtLineVATAmt', "Amount Including VAT" - Amount);
            VerifyReportElementValue('VATAmtLineVAT', "VAT %", 'VATAmtLineLineAmt', Amount);
            VerifyReportElementValue('VATAmtLineVAT', "VAT %", 'VATAmtLineInvDiscBaseAmt', Amount);
            VerifyReportElementValue('VATAmtLineVAT', 0, 'VATAmtLineVATAmt', -("Amount Including VAT" - Amount));
            VerifyReportElementValue('VATAmtLineVAT', 0, 'VATAmtLineLineAmt', 0);
            VerifyReportElementValue('VATAmtLineVAT', 0, 'VATAmtLineInvDiscBaseAmt', 0);
        end;
    end;

    local procedure VerifyServiceCreditMemoReport(ServiceLine: Record "Service Line")
    begin
        LibraryReportDataset.LoadDataSetFile();
        with ServiceLine do begin
            VerifyReportElementValue('Quantity_ServCrMemoLine', Quantity, 'ServiceLineHidden', '0');
            VerifyReportElementValue('Quantity_ServCrMemoLine', -1, 'ServiceLineHidden', '1');
            VerifyReportElementValue('VATAmountLineVAT', "VAT %", 'VATAmtLineVATAmt', "Amount Including VAT" - Amount);
            VerifyReportElementValue('VATAmountLineVAT', "VAT %", 'VATAmtLineLineAmt', Amount);
            VerifyReportElementValue('VATAmountLineVAT', "VAT %", 'VATAmtLineInvDiscBaseAmt', Amount);
            VerifyReportElementValue('VATAmountLineVAT', 0, 'VATAmtLineVATAmt', -("Amount Including VAT" - Amount));
            VerifyReportElementValue('VATAmountLineVAT', 0, 'VATAmtLineLineAmt', 0);
            VerifyReportElementValue('VATAmountLineVAT', 0, 'VATAmtLineInvDiscBaseAmt', 0);
        end;
    end;

    local procedure VerifyCopiedSalesLine(SalesHeader: Record "Sales Header"; GLAccountNo: Code[20])
    var
        SalesLine: Record "Sales Line";
    begin
        SalesLine.SetRange("Document Type", SalesHeader."Document Type");
        SalesLine.SetRange("Document No.", SalesHeader."No.");
        SalesLine.SetRange("No.", GLAccountNo);
        SalesLine.FindFirst();
        SalesLine.TestField("Automatically Generated", true);
    end;

    local procedure TestCleanup()
    var
        SplitVATTest: Record "Split VAT Test";
    begin
        SplitVATTest.DeleteAll(true);
        ChangeTriggeredCalled := false;
        ReGenerateQuestionAsked := false;
    end;

    local procedure SetUpForRecalculateSplitVATInServiceInvoice(var ServiceHeader: Record "Service Header"; var ServiceLine: Record "Service Line"; var ServiceInvoiceSubform: TestPage "Service Invoice Subform"; var VATPostingSetup: Record "VAT Posting Setup") OldUnitPrice: Decimal
    begin
        // [GIVEN] Created split VAT Posting Setup with Service VAT Acctount
        CreateVATPostingSetupForSplitVATFullVAT(VATPostingSetup);

        // [GIVEN] Created Service Invoice
        LibrarySplitVAT.CreateServiceDoc(ServiceHeader, VATPostingSetup, ServiceHeader."Document Type"::Invoice);
        LibrarySplitVAT.CreateServiceLine(ServiceLine, ServiceHeader, VATPostingSetup."VAT Prod. Posting Group");
        LibraryVariableStorage.Enqueue(ServiceLine."Line No.");

        // [GIVEN] Function "Generate Split VAT Lines" was being run
        ServiceHeader.AddSplitVATLines();

        // [GIVEN] Service Invoice Subform was opened
        LibrarySplitVAT.FindServiceLine(ServiceLine, ServiceHeader, true);
        OldUnitPrice := ServiceLine."Unit Price";
        ServiceLine.Get(ServiceHeader."Document Type", ServiceHeader."No.", LibraryVariableStorage.DequeueInteger());
        ServiceInvoiceSubform.OpenEdit();
        ServiceInvoiceSubform.FILTER.SetFilter("Document Type", Format(ServiceLine."Document Type"));
        ServiceInvoiceSubform.FILTER.SetFilter("Document No.", Format(ServiceLine."Document No."));
        ServiceInvoiceSubform.FILTER.SetFilter("Line No.", Format(ServiceLine."Line No."));
        ServiceInvoiceSubform.First();
    end;

    local procedure SetUpForRecalculateSplitVATInServiceCrMemo(var ServiceHeader: Record "Service Header"; var ServiceLine: Record "Service Line"; var ServiceCreditMemoSubform: TestPage "Service Credit Memo Subform"; var VATPostingSetup: Record "VAT Posting Setup") OldUnitPrice: Decimal
    begin
        // [GIVEN] Created split VAT Posting Setup with Service VAT Acctount
        CreateVATPostingSetupForSplitVATFullVAT(VATPostingSetup);

        // [GIVEN] Created Service Credit Memo
        LibrarySplitVAT.CreateServiceDoc(ServiceHeader, VATPostingSetup, ServiceHeader."Document Type"::"Credit Memo");
        LibrarySplitVAT.CreateServiceLine(ServiceLine, ServiceHeader, VATPostingSetup."VAT Prod. Posting Group");
        LibraryVariableStorage.Enqueue(ServiceLine."Line No.");

        // [GIVEN] Function "Generate Split VAT Lines" was being run
        ServiceHeader.AddSplitVATLines();

        // [GIVEN] Service Credit Memo Subform was opened
        LibrarySplitVAT.FindServiceLine(ServiceLine, ServiceHeader, true);
        OldUnitPrice := ServiceLine."Unit Price";
        ServiceLine.Get(ServiceHeader."Document Type", ServiceHeader."No.", LibraryVariableStorage.DequeueInteger());
        ServiceCreditMemoSubform.OpenEdit();
        ServiceCreditMemoSubform.FILTER.SetFilter("Document Type", Format(ServiceLine."Document Type"));
        ServiceCreditMemoSubform.FILTER.SetFilter("Document No.", Format(ServiceLine."Document No."));
        ServiceCreditMemoSubform.FILTER.SetFilter("Line No.", Format(ServiceLine."Line No."));
        ServiceCreditMemoSubform.First();
    end;

    local procedure SetUpForRecalculateSplitVATInSalesInvoice(var SalesHeader: Record "Sales Header"; var SalesLine: Record "Sales Line"; var SalesInvoiceSubform: TestPage "Sales Invoice Subform"; var VATPostingSetup: Record "VAT Posting Setup") OldUnitPrice: Decimal
    begin
        // [GIVEN] Created split VAT Posting Setup with Sales VAT Acctount
        CreateVATPostingSetupForSplitVATFullVAT(VATPostingSetup);

        // [GIVEN] Created Sales Invoice
        LibrarySplitVAT.CreateSalesHeader(SalesHeader, SalesHeader."Document Type"::Invoice, VATPostingSetup."VAT Bus. Posting Group");
        LibrarySplitVAT.CreateSalesLine(SalesLine, SalesHeader, VATPostingSetup."VAT Prod. Posting Group");
        LibraryVariableStorage.Enqueue(SalesLine."Line No.");

        // [GIVEN] Function "Generate Split VAT Lines" was being run
        SalesHeader.AddSplitVATLines();

        // [GIVEN] Sales Invoice Subform was opened
        LibrarySplitVAT.FindSalesLine(SalesLine, SalesHeader, true);
        OldUnitPrice := SalesLine."Unit Price";
        SalesLine.Get(SalesHeader."Document Type", SalesHeader."No.", LibraryVariableStorage.DequeueInteger());
        SalesInvoiceSubform.OpenEdit();
        SalesInvoiceSubform.FILTER.SetFilter("Document Type", Format(SalesLine."Document Type"));
        SalesInvoiceSubform.FILTER.SetFilter("Document No.", Format(SalesLine."Document No."));
        SalesInvoiceSubform.FILTER.SetFilter("Line No.", Format(SalesLine."Line No."));
        SalesInvoiceSubform.First();
    end;

    local procedure SetUpForRecalculateSplitVATInSalesCrMemo(var SalesHeader: Record "Sales Header"; var SalesLine: Record "Sales Line"; var SalesCrMemoSubform: TestPage "Sales Cr. Memo Subform"; var VATPostingSetup: Record "VAT Posting Setup") OldUnitPrice: Decimal
    begin
        // [GIVEN] Created split VAT Posting Setup with Sales VAT Acctount
        CreateVATPostingSetupForSplitVATFullVAT(VATPostingSetup);

        // [GIVEN] Created Sales Credit Memo
        LibrarySplitVAT.CreateSalesHeader(
          SalesHeader, SalesHeader."Document Type"::"Credit Memo", VATPostingSetup."VAT Bus. Posting Group");
        LibrarySplitVAT.CreateSalesLine(SalesLine, SalesHeader, VATPostingSetup."VAT Prod. Posting Group");
        LibraryVariableStorage.Enqueue(SalesLine."Line No.");

        // [GIVEN] Function "Generate Split VAT Lines" was being run
        SalesHeader.AddSplitVATLines();

        // [GIVEN] Sales Credit Memo Subform was opened
        LibrarySplitVAT.FindSalesLine(SalesLine, SalesHeader, true);
        OldUnitPrice := SalesLine."Unit Price";
        SalesLine.Get(SalesHeader."Document Type", SalesHeader."No.", LibraryVariableStorage.DequeueInteger());
        SalesCrMemoSubform.OpenEdit();
        SalesCrMemoSubform.FILTER.SetFilter("Document Type", Format(SalesLine."Document Type"));
        SalesCrMemoSubform.FILTER.SetFilter("Document No.", Format(SalesLine."Document No."));
        SalesCrMemoSubform.FILTER.SetFilter("Line No.", Format(SalesLine."Line No."));
        SalesCrMemoSubform.First();
    end;

    [ConfirmHandler]
    [Scope('OnPrem')]
    procedure ChangeTriggeredConfirmHandler(Question: Text[1024]; var Reply: Boolean)
    begin
        if StrPos(Question, ChangeQuantityTxt) <> 0 then
            ChangeTriggeredCalled := true;

        if (not ChangeTriggeredCalled) and (StrPos(DoYouWantToGenerateLinesTxt, Question) = 0) then
            Assert.Fail(StrSubstNo('Unexpected Confirmation Dialog %1', Question));

        Reply := true;
    end;

    [ConfirmHandler]
    [Scope('OnPrem')]
    procedure GenerateLinesConfirmHandler(Question: Text[1024]; var Reply: Boolean)
    begin
        Assert.ExpectedMessage(DoYouWantToGenerateLinesTxt, Question);
        Reply := true;
    end;

    [ConfirmHandler]
    [Scope('OnPrem')]
    procedure ReGenerateLinesConfirmHandler(Question: Text[1024]; var Reply: Boolean)
    begin
        if StrPos(Question, RegenerateLinesTxt) <> 0 then
            ReGenerateQuestionAsked := true;

        if (not ReGenerateQuestionAsked) and (StrPos(DoYouWantToGenerateLinesTxt, Question) = 0) then
            Assert.Fail(StrSubstNo('Unexpected Confirmation Dialog %1', Question));

        Reply := true;
    end;

    [MessageHandler]
    [Scope('OnPrem')]
    procedure NothingToGenerateMessageHandler(Message: Text[1024])
    begin
        Assert.ExpectedMessage(NoLinesTxt, Message);
    end;

    [RequestPageHandler]
    [Scope('OnPrem')]
    procedure SalesDocumentTestReportRPH(var SalesDocumentTest: TestRequestPage "Sales Document - Test")
    begin
        SalesDocumentTest."Sales Header".SetFilter("No.", LibraryVariableStorage.DequeueText());
        SalesDocumentTest.SaveAsXml(LibraryReportDataset.GetParametersFileName(), LibraryReportDataset.GetFileName());
    end;

    [RequestPageHandler]
    [Scope('OnPrem')]
    procedure ServiceDocumentTestReportRPH(var ServiceDocumentTest: TestRequestPage "Service Document - Test")
    begin
        ServiceDocumentTest."Service Header".SetFilter("No.", LibraryVariableStorage.DequeueText());
        ServiceDocumentTest.SaveAsXml(LibraryReportDataset.GetParametersFileName(), LibraryReportDataset.GetFileName());
    end;

    [RequestPageHandler]
    [Scope('OnPrem')]
    procedure ServiceInvoiceReportRPH(var ServiceInvoice: TestRequestPage "Service - Invoice")
    begin
        ServiceInvoice."Service Invoice Header".SetFilter("No.", LibraryVariableStorage.DequeueText());
        ServiceInvoice.SaveAsXml(LibraryReportDataset.GetParametersFileName(), LibraryReportDataset.GetFileName());
    end;

    [RequestPageHandler]
    [Scope('OnPrem')]
    procedure ServiceCreditMemoReportRPH(var ServiceCreditMemo: TestRequestPage "Service - Credit Memo")
    begin
        ServiceCreditMemo."Service Cr.Memo Header".SetFilter("No.", LibraryVariableStorage.DequeueText());
        ServiceCreditMemo.SaveAsXml(LibraryReportDataset.GetParametersFileName(), LibraryReportDataset.GetFileName());
    end;

    [ModalPageHandler]
    [Scope('OnPrem')]
    procedure SalesStatisticsPageHandler(var SalesStatistics: TestPage "Sales Statistics")
    var
        InvoiceDiscountAmount: Variant;
    begin
        LibraryVariableStorage.Dequeue(InvoiceDiscountAmount);
        SalesStatistics.InvDiscountAmount.AssertEquals(InvoiceDiscountAmount);
    end;

    [ModalPageHandler]
    [Scope('OnPrem')]
    procedure ServiceStatisticsPageHandler(var ServiceStatistics: TestPage "Service Statistics")
    var
        InvoiceDiscountAmount: Variant;
    begin
        LibraryVariableStorage.Dequeue(InvoiceDiscountAmount);
        ServiceStatistics."Inv. Discount Amount_General".AssertEquals(InvoiceDiscountAmount);
    end;

    [SendNotificationHandler]
    procedure SendNotificationHandler(var Notification: Notification): Boolean
    begin
    end;

    [RecallNotificationHandler]
    procedure RecallNotificationHandler(var Notification: Notification): Boolean
    begin
    end;
}

