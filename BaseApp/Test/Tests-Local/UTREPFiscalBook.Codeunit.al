codeunit 144074 "UT REP Fiscal Book"
{
    // 1-5: Purpose of these test cases are to validate OnPreDataItem Trigger of Report - 12120 [VAT Register - Print] with different Company Information Field blank.
    //   6. Purpose of the test is to validate OnPreReport Trigger of Report - 12121 G/L Book - Print for two different accounting periods.
    //   7. Purpose of the test is to validate OnPreReport Trigger of Report - 12121 G/L Book - Print when Starting Date is equal to Fiscal Year Starting Date.
    //   8. Purpose of the test is to validate EndingDate - OnValidate Trigger of Report - 12121 G/L Book - Print when Ending Date is greater than Last Gen. Jour. Printing Date.
    //   9. Purpose of the test is to validate Bank Account - OnAfterGetRecord Trigger of Report 12112 (Bank Sheet - Print).
    //  10. Purpose of the test is to validate Bank Account - OnAfterGetRecord Trigger of Report 12112 (Bank Sheet - Print).
    //  11. Purpose of the test is to verify that the page numbering works for the next period as well on Report 12121 (G/L Book - Print).
    //  12. Purpose of the test is to verify that the page numbering and the fields on table 98 General Ledger Setup (Generated by printing Report 12121 G/L Book  Print) are reset in case of a new fiscal year.
    //  13. Purpose of the test is to verify that that the report header does not contains the company information on the first (front) page and on all following pages when option Print Company Information is set to false (unmarked).
    //  14. Purpose of the test is to verify the amounts in Printed entries Total + Progressive Total and Printed Entries Total in the printed report are shown correctly with FCY Report - 12104 Customer Sheet - Print.
    //  15. Purpose of the test is to verify that controls are properly showing on VAT Register Grouped report's Request Page.
    // 
    // Covers Test Cases for WI - 346734
    // ---------------------------------------------------------------------
    // Test Function Name                                          TFS ID
    // ---------------------------------------------------------------------
    // OnPreDataItemPrintCompInfoVATRegPrintAddressErr              154829
    // OnPreDataItemPrintCompInfoVATRegPrintPostCodeErr             154830
    // OnPreDataItemPrintCompInfoVATRegPrintRegCompNoErr            154831
    // OnPreDataItemPrintCompInfoVATRegPrintVATRegNoErr             154833
    // OnPreDataItemPrintCompInfoVATRegPrintFiscalCodeErr           154834
    // 
    // Covers Test Cases for WI - 346708
    // ------------------------------------------------------------------
    // Test Function Name                                          TFS ID
    // ------------------------------------------------------------------
    // OnPreReportGLBookPrintDiffAccountingPeriodError             243390
    // OnPreReportGLBookPrint                               243391,243392
    // OnValidateEndingDateGLBookPrintError                        243393
    // 
    // Covers Test Cases for WI - 346514
    // ------------------------------------------------------------------
    // Test Function Name                                          TFS ID
    // ------------------------------------------------------------------
    // OnAfterGetRecordBankSheetPrintDebitAmount,
    // OnAfterGetRecordBankSheetPrintCreditAmount                  152666
    // 
    // Covers Test Cases for WI - 348936
    // ------------------------------------------------------------------
    // Test Function Name                                          TFS ID
    // ------------------------------------------------------------------
    // OnPreDataItemUpdateLastPageNoOnGLBookPrint                  154847
    // OnPreDataItemUpdLastPageNoNewFiscYearOnGLBookPrint   154874/154850
    // OnPreDataItemWithoutPrintCoInfoVATRegisterGrouped           154862
    // OnAfterGetRecDtldCustLedgEntryWithFCYCustSheetPrint         154871
    // VATRegisterGroupedRequestPageControls                       154859

    Subtype = Test;
    TestPermissions = Disabled;

    trigger OnRun()
    begin
    end;

    var
        AmountCap: Label 'Amt';
        AmountLCYCap: Label 'AmountLCY';
        CurrencyCodeCap: Label 'CurrencyCode';
        CustomerNumberCap: Label 'No_Customer';
        DecreasesAmtCap: Label 'DecreasesAmt';
        DialogErr: Label 'Dialog';
        Assert: Codeunit Assert;
        LibraryReportDataset: Codeunit "Library - Report Dataset";
        LibraryUTUtility: Codeunit "Library UT Utility";
        LibraryVariableStorage: Codeunit "Library - Variable Storage";
        LibraryRandom: Codeunit "Library - Random";
        IncreasesAmtCap: Label 'IncreasesAmt';
        IcreasesAmntCap: Label 'IcreasesAmnt';
        LastNoCap: Label 'LastNo';
        LastPrintedPageNoCap: Label 'LastPrintedPageNo';
        OrigAmountCap: Label 'OrigAmount';
        PageCap: Label 'Page ';
        PageNoPrefixCap: Label 'PageNoPrefix';
        PrintCompanyInformationsCap: Label 'PrintCompanyInformations1';
        PrintedEntriesTotalCap: Label 'PrintedEntriesTotalCaption';
        ProgressiveTotCap: Label 'PrintedEntriesTotProgressiveTotCaption';
        PrintedEntriesTotalTxt: Label 'Printed Entries Total';
        ProgressiveTotalTxt: Label 'Printed Entries Total + Progressive Total';
        StartOnHandAmountLCYCap: Label 'StartOnHandAmountLCY';
        TestValidationErr: Label 'TestValidation';
        BankSheetPrintStartOnHandTok: Label 'StartOnHand';

    [Test]
    [HandlerFunctions('VATRegisterPrintRequestPageHandler')]
    [TransactionModel(TransactionModel::AutoRollback)]
    [Scope('OnPrem')]
    procedure OnPreDataItemPrintCompInfoVATRegPrintAddressErr()
    begin
        // Purpose of the test is to validate OnPreDataItem Trigger of Report - 12120 [VAT Register - Print] with Blank Company Address.
        Initialize();
        VATRegisterPrintWithError(LibraryUTUtility.GetNewCode(), '', '', '', '', '');  // Only Company Name is filled rest all blank Company Information Fields.
    end;

    [Test]
    [HandlerFunctions('VATRegisterPrintRequestPageHandler')]
    [TransactionModel(TransactionModel::AutoRollback)]
    [Scope('OnPrem')]
    procedure OnPreDataItemPrintCompInfoVATRegPrintPostCodeErr()
    begin
        // Purpose of the test is to validate OnPreDataItem Trigger of Report - 12120 [VAT Register - Print] with Blank Company Post Code.
        Initialize();
        VATRegisterPrintWithError(LibraryUTUtility.GetNewCode(), LibraryUTUtility.GetNewCode(), '', '', '', '');  // All blank Company Information Fields except Name and Address.
    end;

    [Test]
    [HandlerFunctions('VATRegisterPrintRequestPageHandler')]
    [TransactionModel(TransactionModel::AutoRollback)]
    [Scope('OnPrem')]
    procedure OnPreDataItemPrintCompInfoVATRegPrintRegCompNoErr()
    begin
        // Purpose of the test is to validate OnPreDataItem Trigger of Report - 12120 [VAT Register - Print] with Blank Register Company Number.
        Initialize();
        VATRegisterPrintWithError(LibraryUTUtility.GetNewCode(), LibraryUTUtility.GetNewCode(), LibraryUTUtility.GetNewCode10(), '', '', '');  // All blank Company Information Fields except Name, Address, Post Code.
    end;

    [Test]
    [HandlerFunctions('VATRegisterPrintRequestPageHandler')]
    [TransactionModel(TransactionModel::AutoRollback)]
    [Scope('OnPrem')]
    procedure OnPreDataItemPrintCompInfoVATRegPrintVATRegNoErr()
    begin
        // Purpose of the test is to validate OnPreDataItem Trigger of Report - 12120 [VAT Register - Print] with Blank VAT Registration Number.
        Initialize();
        VATRegisterPrintWithError(
          LibraryUTUtility.GetNewCode(), LibraryUTUtility.GetNewCode(), LibraryUTUtility.GetNewCode10(), LibraryUTUtility.GetNewCode(), '', '');  // Blank VAT Registration, Fiscal Code.
    end;

    [Test]
    [HandlerFunctions('VATRegisterPrintRequestPageHandler')]
    [TransactionModel(TransactionModel::AutoRollback)]
    [Scope('OnPrem')]
    procedure OnPreDataItemPrintCompInfoVATRegPrintFiscalCodeErr()
    begin
        // Purpose of the test is to validate OnPreDataItem Trigger of Report - 12120 [VAT Register - Print] with Blank Fiscal Code.
        Initialize();
        VATRegisterPrintWithError(
          LibraryUTUtility.GetNewCode(), LibraryUTUtility.GetNewCode(), LibraryUTUtility.GetNewCode10(),
          LibraryUTUtility.GetNewCode(), LibraryUTUtility.GetNewCode(), '');  // Blank Fiscal Code.
    end;

    local procedure VATRegisterPrintWithError(Name: Text[50]; Address: Text[50]; PostCode: Code[10]; RegisterCompanyNo: Text[50]; VATRegistrationNo: Text[20]; FiscalCode: Code[20])
    begin
        // Setup.
        UpdateCompanyInformation(Name, Address, PostCode, RegisterCompanyNo, VATRegistrationNo, FiscalCode);

        // Exercise.
        asserterror REPORT.Run(REPORT::"VAT Register - Print");  // Opens handler - VATRegisterPrintRequestPageHandler.

        // Verify: Verify expected error code, actual error: "All Company Information related fields should be filled in on the request form".
        Assert.ExpectedErrorCode(DialogErr);
    end;

    [Test]
    [HandlerFunctions('GLBookPrintRequestPageHandler')]
    [TransactionModel(TransactionModel::AutoRollback)]
    [Scope('OnPrem')]
    procedure OnPreReportGLBookPrintDiffAccountingPeriodError()
    var
        ReportType: Option "Test Print","Final Print",Reprint;
        StartingDate: Date;
    begin
        // Purpose of the test is to validate OnPreReport Trigger of Report - 12121 G/L Book - Print for two different accounting periods.
        // Setup.
        Initialize();
        StartingDate := CalcDate('<CY>', WorkDate());
        CreateAccountingPeriod(StartingDate);

        // Enqueue Accounting Period Starting Date as Starting Date and a random Ending Date in different accounting period for GLBookPrintRequestPageHandler.
        EnqueueValuesInGLBookPrintRequestPageHandler(
          ReportType::"Test Print", StartingDate, CalcDate('<' + Format(LibraryRandom.RandInt(5)) + 'D>', StartingDate));

        // Exercise.
        asserterror REPORT.Run(REPORT::"G/L Book - Print");

        // Verify: Verify expected error code, actual error: "You cannot print entries of two different accounting periods".
        Assert.ExpectedErrorCode(DialogErr);
    end;

    [Test]
    [HandlerFunctions('GLBookPrintRequestPageHandler')]
    [TransactionModel(TransactionModel::AutoRollback)]
    [Scope('OnPrem')]
    procedure OnPreReportGLBookPrint()
    var
        ReportType: Option "Test Print","Final Print",Reprint;
    begin
        // Purpose of the test is to validate OnPreReport Trigger of Report - 12121 G/L Book - Print when Starting Date is equal to Fiscal Year Starting Date.
        // Setup.
        Initialize();
        CreateAccountingPeriod(WorkDate());
        CreateGLBookEntry();
        EnqueueValuesInGLBookPrintRequestPageHandler(
          ReportType::"Test Print", WorkDate(), CalcDate('<' + Format(LibraryRandom.RandInt(5)) + 'D>', WorkDate()));  // Enqueue WORKDATE as Starting Date and a random greater date as Ending Date for GLBookPrintRequestPageHandler.

        // Exercise.
        REPORT.Run(REPORT::"G/L Book - Print");

        // Verify: Verify LastNo on XML of Report 12121 - G/L Book - Print.
        LibraryReportDataset.LoadDataSetFile();
        LibraryReportDataset.AssertElementWithValueExists(LastNoCap, 1);  // Last No must be 1.
    end;

    [Test]
    [HandlerFunctions('GLBookPrintRequestPageHandler')]
    [TransactionModel(TransactionModel::AutoRollback)]
    [Scope('OnPrem')]
    procedure OnValidateEndingDateGLBookPrintError()
    var
        ReportType: Option "Test Print","Final Print",Reprint;
    begin
        // Purpose of the test is to validate EndingDate - OnValidate Trigger of Report - 12121 G/L Book - Print when Ending Date is greater than Last Gen. Jour. Printing Date.
        // Setup.
        Initialize();
        UpdateGLSetupLastGenJourPrintingDate(CalcDate('<' + Format(-LibraryRandom.RandInt(5)) + 'D>', WorkDate()));  // Using a random date earlier than WORKDATE for Last Gen Jour. Printing Date.
        EnqueueValuesInGLBookPrintRequestPageHandler(ReportType::Reprint, WorkDate(), WorkDate());  // Enqueue WORKDATE as Starting and Ending Date for GLBookPrintRequestPageHandler.

        // Exercise.
        asserterror REPORT.Run(REPORT::"G/L Book - Print");

        // Verify: Verify expected error code, actual error: "Ending Date must not be greater than Last Gen. Jour. Printing Date.".
        Assert.ExpectedErrorCode(TestValidationErr);
    end;

    [Test]
    [HandlerFunctions('BankSheetPrintRequestPageHandler')]
    [TransactionModel(TransactionModel::AutoRollback)]
    [Scope('OnPrem')]
    procedure OnAfterGetRecordBankSheetPrintDebitAmount()
    begin
        // Purpose of the test is to validate Bank Account - OnAfterGetRecord Trigger of Report 12112 (Bank Sheet - Print).
        Initialize();
        BankSheetPrintWithDebitAndCreditAmount(
          LibraryRandom.RandDec(50, 2), LibraryRandom.RandDecInRange(100, 500, 2), IncreasesAmtCap);  // Random Amounts. Credit Amount is lesser than Debit Amount.
    end;

    [Test]
    [HandlerFunctions('BankSheetPrintRequestPageHandler')]
    [TransactionModel(TransactionModel::AutoRollback)]
    [Scope('OnPrem')]
    procedure OnAfterGetRecordBankSheetPrintCreditAmount()
    begin
        // Purpose of the test is to validate Bank Account - OnAfterGetRecord Trigger of Report 12112 (Bank Sheet - Print).
        Initialize();
        BankSheetPrintWithDebitAndCreditAmount(
          LibraryRandom.RandDecInRange(100, 500, 2), LibraryRandom.RandDec(50, 2), DecreasesAmtCap);  // Random Amounts. Debit Amount is lesser than Credit Amount.
    end;

    [Test]
    [HandlerFunctions('BankSheetPrintRequestPageHandler')]
    [TransactionModel(TransactionModel::AutoRollback)]
    [Scope('OnPrem')]
    procedure BankSheetPrintWithEntriesInPreviousPeriod()
    var
        BankAccountNo: Code[20];
        Amount: Decimal;
    begin
        // [FEATURE] [Bank Sheet - Print]
        // [SCENARIO 364571] Bank Sheet - Print report prints StartOnHand value if it has beginning balance and no entries on reporting period.
        Initialize();

        // [GIVEN] Bank Account Ledger Entry earlier than WORKDATE and Amount = "X"
        BankAccountNo := CreateBankAccount();
        Amount :=
          CreateBankAccountLedgerEntry(
            BankAccountNo, LibraryRandom.RandDecInRange(100, 500, 2), LibraryRandom.RandDecInRange(100, 500, 2),
            LibraryRandom.RandDate(-5));
        LibraryVariableStorage.Enqueue(BankAccountNo);

        // [WHEN] Run "Bank Sheet - Print" report on WORKDATE
        REPORT.Run(REPORT::"Bank Sheet - Print");

        // [THEN] StartOnHand value is equal to "X"
        LibraryReportDataset.LoadDataSetFile();
        LibraryReportDataset.AssertElementWithValueExists(BankSheetPrintStartOnHandTok, Abs(Amount));
    end;

    local procedure BankSheetPrintWithDebitAndCreditAmount(CreditAmountLCY: Decimal; DebitAmountLCY: Decimal; DebitCreditAmountCaption: Text)
    var
        BankAccountNo: Code[20];
        Amount: Decimal;
    begin
        // Setup: Create Bank Ledger Entry With Random Debit and Credit Amounts.
        BankAccountNo := CreateBankAccount();
        Amount := CreateBankAccountLedgerEntry(BankAccountNo, CreditAmountLCY, DebitAmountLCY, WorkDate());
        LibraryVariableStorage.Enqueue(BankAccountNo);  // Enqueue Value in BankSheetPrintRequestPageHandler.

        // Exercise.
        REPORT.Run(REPORT::"Bank Sheet - Print");

        // Verify: Verify Bank Account No. on Report 12112 (Bank Sheet - Print).
        LibraryReportDataset.LoadDataSetFile();
        LibraryReportDataset.AssertElementWithValueExists(AmountCap, Amount);
        LibraryReportDataset.AssertElementWithValueExists(DebitCreditAmountCaption, Abs(Amount));
    end;

    [Test]
    [HandlerFunctions('GLBookPrintRequestPageHandler')]
    [TransactionModel(TransactionModel::AutoRollback)]
    [Scope('OnPrem')]
    procedure OnPreDataItemUpdateLastPageNoOnGLBookPrint()
    var
        GeneralLedgerSetup: Record "General Ledger Setup";
        ReportType: Option "Test Print","Final Print",Reprint;
    begin
        // Purpose of the test is to verify that the page numbering works for the next period as well on Report 12121 (G/L Book - Print).
        // Setup.
        Initialize();
        EnqueueValuesInGLBookPrintRequestPageHandler(
          ReportType::"Test Print", CalcDate('<-CY-1Y-CM>', WorkDate()), CalcDate('<-CY-1Y+CM>', WorkDate()));  // Enqueue values in GLBookPrintRequestPageHandler.
        REPORT.Run(REPORT::"G/L Book - Print");
        UpdateGLSetupLastGenJourPrintingDate(CalcDate('<-CY-1Y-CM>', WorkDate()));
        EnqueueValuesInGLBookPrintRequestPageHandler(
          ReportType::"Test Print", CalcDate('<-CY-1Y+1M>', WorkDate()), CalcDate('<-CY-1Y+2M>', WorkDate()));  // Enqueue values in GLBookPrintRequestPageHandler.

        // Exercise.
        REPORT.Run(REPORT::"G/L Book - Print");

        // Verify.
        GeneralLedgerSetup.Get();
        LibraryReportDataset.LoadDataSetFile();
        LibraryReportDataset.AssertElementWithValueExists(PageNoPrefixCap, PageCap + Format(Date2DMY(CalcDate('<CY-1Y>', WorkDate()), 3)));
        LibraryReportDataset.AssertElementWithValueExists(LastPrintedPageNoCap, GeneralLedgerSetup."Last Printed G/L Book Page");
    end;

    [Test]
    [HandlerFunctions('GLBookPrintRequestPageHandler')]
    [TransactionModel(TransactionModel::AutoRollback)]
    [Scope('OnPrem')]
    procedure OnPreDataItemUpdLastPageNoNewFiscYearOnGLBookPrint()
    var
        GeneralLedgerSetup: Record "General Ledger Setup";
        ReportType: Option "Test Print","Final Print",Reprint;
        EndDate: Date;
        StartDate: Date;
    begin
        // Purpose of the test is to verify that the page numbering and the fields on table 98 General Ledger Setup (Generated by printing Report 12121 G/L Book  Print) are reset in case of a new fiscal year.
        // Setup.
        Initialize();
        EnqueueValuesInGLBookPrintRequestPageHandler(
          ReportType::"Test Print", CalcDate('<CY-1Y-CM>', WorkDate()), CalcDate('<CY-1Y+CM>', WorkDate()));  // Enqueue values in GLBookPrintRequestPageHandler.
        REPORT.Run(REPORT::"G/L Book - Print");
        UpdateGLSetupLastGenJourPrintingDate(CalcDate('<-CY-1Y-CM>', WorkDate()));
        StartDate := GetStartDate(true);
        EndDate := GetEndDate(StartDate);
        EnqueueValuesInGLBookPrintRequestPageHandler(ReportType::"Test Print", StartDate, EndDate);  // Enqueue values in GLBookPrintRequestPageHandler.

        // Exercise.
        REPORT.Run(REPORT::"G/L Book - Print");

        // Verify.
        GeneralLedgerSetup.Get();
        LibraryReportDataset.LoadDataSetFile();
        LibraryReportDataset.AssertElementWithValueExists(PageNoPrefixCap, PageCap + Format(Date2DMY(CalcDate('<CY>', WorkDate()), 3)));
        LibraryReportDataset.AssertElementWithValueExists(LastPrintedPageNoCap, 0);  // 0 is used test Last Printed Page No.
    end;

    [Test]
    [HandlerFunctions('VATRegisterGroupedRequestPageHandler')]
    [TransactionModel(TransactionModel::AutoRollback)]
    [Scope('OnPrem')]
    procedure OnPreDataItemWithoutPrintCoInfoVATRegisterGrouped()
    begin
        // Purpose of the test is to verify that that the report header does not contains the company information on the first (front) page and on all following pages when option Print Company Information is set to false (unmarked)

        // Setup.
        Initialize();
        UpdateCompanyInformation(
          LibraryUTUtility.GetNewCode(), LibraryUTUtility.GetNewCode(), LibraryUTUtility.GetNewCode10(),
          LibraryUTUtility.GetNewCode(), LibraryUTUtility.GetNewCode(), LibraryUTUtility.GetNewCode());
        CreateVATRegisterBuffer();
        EnqueueValuesInVATRegisterGroupedHandler(CalcDate('<-CM>', WorkDate()), CalcDate('<CM>', WorkDate()));
        LibraryVariableStorage.Enqueue(false); // Enqueue False for Print Company Information on VAT Register Grouped Request Page Handler.

        // Exercise.
        REPORT.Run(REPORT::"VAT Register Grouped");  // Opens handler - VATRegisterGroupedRequestPageHandler.

        // Verify.
        LibraryReportDataset.LoadDataSetFile();
        LibraryReportDataset.AssertElementWithValueExists(PrintCompanyInformationsCap, false);
    end;

    [Test]
    [HandlerFunctions('CustomerSheetPrintRequestPageHandler')]
    [Scope('OnPrem')]
    procedure OnAfterGetRecDtldCustLedgEntryWithFCYCustSheetPrint()
    var
        DetailedCustLedgEntry: Record "Detailed Cust. Ledg. Entry";
    begin
        // Purpose of the test is to verify the amounts in Printed entries Total + Progressive Total and Printed Entries Total in the printed report are shown correctly with FCY Report - 12104 Customer Sheet - Print.

        // Setup: Create Sales Header with blank Posting Number and Detailed Customer Ledger Entry.
        Initialize();
        CreateCustomerEntries(
          DetailedCustLedgEntry, CreateSalesHeader(''), LibraryUTUtility.GetNewCode(),
          DetailedCustLedgEntry."Entry Type"::"Initial Entry");  // Document Number, Blank Posting Number.
        LibraryVariableStorage.Enqueue(DetailedCustLedgEntry."Customer No.");  // Enqueue value for handler - CustomerSheetPrintRequestPageHandler.
        Commit();

        // Exercise.
        REPORT.Run(REPORT::"Customer Sheet - Print");  // Opens handler - CustomerSheetPrintRequestPageHandler.

        // Verify.
        VerifyValuesOnCustSheetPrintReport(DetailedCustLedgEntry);
    end;

    [Test]
    [HandlerFunctions('VATRegisterGroupedReqPageHandler')]
    [Scope('OnPrem')]
    procedure VATRegisterGroupedRequestPageControls()
    begin
        // Purpose of the test is to verify that controls are properly showing on VAT Register Grouped report's Request Page.

        // Setup.
        Initialize();

        // Exercise:
        REPORT.Run(REPORT::"VAT Register Grouped");  // Invoke VATRegisterGroupedReqPageHandler.

        // Verify: Verify that controls are correctly showing control values on VATRegisterGroupedReqPageHandler. Verification done on Request Page Handler.
    end;

    local procedure Initialize()
    begin
        LibraryVariableStorage.Clear();
    end;

    local procedure CreateBankAccount(): Code[20]
    var
        BankAccount: Record "Bank Account";
    begin
        BankAccount."No." := LibraryUTUtility.GetNewCode();
        BankAccount."Date Filter" := WorkDate();
        BankAccount.Insert();
        exit(BankAccount."No.");
    end;

    local procedure CreateBankAccountLedgerEntry(BankAccountNo: Code[20]; CreditAmountLCY: Decimal; DebitAmountLCY: Decimal; PostingDate: Date): Decimal
    var
        BankAccountLedgerEntry: Record "Bank Account Ledger Entry";
    begin
        BankAccountLedgerEntry."Entry No." := LibraryRandom.RandInt(10);
        BankAccountLedgerEntry."Bank Account No." := BankAccountNo;
        BankAccountLedgerEntry."Document No." := LibraryUTUtility.GetNewCode();
        BankAccountLedgerEntry."Posting Date" := PostingDate;
        BankAccountLedgerEntry."Credit Amount (LCY)" := -CreditAmountLCY;
        BankAccountLedgerEntry."Debit Amount (LCY)" := DebitAmountLCY;
        BankAccountLedgerEntry.Amount := BankAccountLedgerEntry."Debit Amount (LCY)" + BankAccountLedgerEntry."Credit Amount (LCY)";
        BankAccountLedgerEntry.Insert();
        exit(BankAccountLedgerEntry.Amount);
    end;

    local procedure CreateAccountingPeriod(StartingDate: Date)
    var
        AccountingPeriod: Record "Accounting Period";
    begin
        AccountingPeriod."Starting Date" := StartingDate;
        AccountingPeriod."New Fiscal Year" := true;
        AccountingPeriod.Insert();
    end;

    local procedure CreateCustomer(): Code[20]
    var
        Customer: Record Customer;
    begin
        Customer."No." := LibraryUTUtility.GetNewCode();
        Customer.Name := Customer."No.";
        Customer."Date Filter" := WorkDate();
        Customer.Insert();
        exit(Customer."No.");
    end;

    local procedure CreateCustomerEntries(var DetailedCustLedgEntry: Record "Detailed Cust. Ledg. Entry"; CustomerNo: Code[20]; DocumentNo: Code[20]; EntryType: Enum "Detailed CV Ledger Entry Type")
    var
        CustLedgerEntry: Record "Cust. Ledger Entry";
        CustLedgerEntry2: Record "Cust. Ledger Entry";
        DetailedCustLedgEntry2: Record "Detailed Cust. Ledg. Entry";
    begin
        CustLedgerEntry2.FindLast();
        CustLedgerEntry."Entry No." := CustLedgerEntry2."Entry No." + 1;
        CustLedgerEntry."Customer No." := CustomerNo;
        CustLedgerEntry."Posting Date" := WorkDate();
        CustLedgerEntry."Document No." := DocumentNo;
        CustLedgerEntry."Currency Code" := LibraryUTUtility.GetNewCode10();
        CustLedgerEntry.Amount := LibraryRandom.RandDec(10, 2);
        CustLedgerEntry."Amount (LCY)" := CustLedgerEntry.Amount + LibraryRandom.RandDec(10, 2);
        CustLedgerEntry.Insert();

        DetailedCustLedgEntry2.FindLast();
        DetailedCustLedgEntry."Entry No." := DetailedCustLedgEntry2."Entry No." + 1;
        DetailedCustLedgEntry."Customer No." := CustLedgerEntry."Customer No.";
        DetailedCustLedgEntry."Document No." := CustLedgerEntry."Document No.";
        DetailedCustLedgEntry."Cust. Ledger Entry No." := CustLedgerEntry."Entry No.";
        DetailedCustLedgEntry."Entry Type" := EntryType;
        DetailedCustLedgEntry.Amount := LibraryRandom.RandDec(10, 2);
        DetailedCustLedgEntry."Amount (LCY)" := DetailedCustLedgEntry.Amount;
        DetailedCustLedgEntry."Credit Amount" := DetailedCustLedgEntry.Amount;
        DetailedCustLedgEntry."Credit Amount (LCY)" := DetailedCustLedgEntry.Amount;
        DetailedCustLedgEntry."Posting Date" := CustLedgerEntry."Posting Date";
        DetailedCustLedgEntry."Currency Code" := CustLedgerEntry."Currency Code";
        DetailedCustLedgEntry.Insert(true);
    end;

    local procedure CreateGLBookEntry()
    var
        GLBookEntry: Record "GL Book Entry";
    begin
        GLBookEntry.DeleteAll();  // Deletion of G/L Book Entry is required to run Report - G/L Book - Print.
        GLBookEntry."Posting Date" := WorkDate();
        GLBookEntry."Official Date" := WorkDate();
        GLBookEntry.Insert();
    end;

    local procedure CreateSalesHeader(PostingNo: Code[20]): Code[20]
    var
        SalesHeader: Record "Sales Header";
    begin
        SalesHeader."Document Type" := SalesHeader."Document Type"::Order;
        SalesHeader."No." := LibraryUTUtility.GetNewCode();
        SalesHeader."Sell-to Customer No." := CreateCustomer();
        SalesHeader."Posting No." := PostingNo;
        SalesHeader.Insert();
        exit(SalesHeader."Sell-to Customer No.");
    end;

    local procedure CreateVATRegister(): Code[10]
    var
        VATRegister: Record "VAT Register";
    begin
        VATRegister.Code := LibraryUTUtility.GetNewCode10();
        VATRegister.Insert();
        exit(VATRegister.Code);
    end;

    local procedure CreateVATRegisterBuffer()
    var
        VATRegisterBuffer: Record "VAT Register - Buffer";
    begin
        VATRegisterBuffer."Period Start Date" := WorkDate();
        VATRegisterBuffer."Period End Date" := WorkDate();
        VATRegisterBuffer."VAT Register Code" := CreateVATRegister();
        VATRegisterBuffer."VAT Identifier" := LibraryUTUtility.GetNewCode10();
        VATRegisterBuffer.Insert();
    end;

    local procedure EnqueueValuesInGLBookPrintRequestPageHandler(ReportType: Option; StartingDate: Date; EndingDate: Date)
    begin
        LibraryVariableStorage.Enqueue(ReportType);
        LibraryVariableStorage.Enqueue(StartingDate);
        LibraryVariableStorage.Enqueue(EndingDate);
    end;

    local procedure EnqueueValuesInVATRegisterGroupedHandler(PeriodStartingDate: Date; PeriodEndingDate: Date)
    begin
        // Enqueue Values For VAT Register Grouped Request Page Handler.
        LibraryVariableStorage.Enqueue(PeriodStartingDate);
        LibraryVariableStorage.Enqueue(PeriodEndingDate);
    end;

    local procedure GetEndDate(Date: Date) EndDate: Date
    begin
        EndDate := CalcDate('<CM>', Date);
    end;

    local procedure GetLastPostingDate() LastPostingDate: Date
    var
        GLEntry: Record "G/L Entry";
        GeneralLedgerSetup: Record "General Ledger Setup";
    begin
        GeneralLedgerSetup.Get();
        LastPostingDate := GeneralLedgerSetup."Last Gen. Jour. Printing Date"; // G/L Book Entries are either Printed or Deleted.
        if LastPostingDate = 0D then begin
            GLEntry.SetCurrentKey("Official Date");
            GLEntry.FindLast();
            LastPostingDate := GLEntry."Posting Date";
        end;
    end;

    local procedure GetStartDate(NewFiscalYear: Boolean) StartDate: Date
    var
        AccPeriod: Record "Accounting Period";
    begin
        AccPeriod.SetFilter("Starting Date", '>%1', GetLastPostingDate());
        AccPeriod.SetRange("New Fiscal Year", NewFiscalYear);
        if not AccPeriod.FindFirst() then
            CreateAccountingPeriod(AccPeriod."Starting Date");
        StartDate := AccPeriod."Starting Date";
    end;

    local procedure UpdateCompanyInformation(Name: Text[50]; Address: Text[50]; PostCode: Code[10]; RegisterCompanyNo: Text[50]; VATRegistrationNo: Text[20]; FiscalCode: Code[20])
    var
        CompanyInformation: Record "Company Information";
    begin
        CompanyInformation.Get();
        CompanyInformation.Name := Name;
        CompanyInformation.Address := Address;
        CompanyInformation."Post Code" := PostCode;
        CompanyInformation.City := CompanyInformation."Post Code";
        CompanyInformation.County := CompanyInformation."Post Code";
        CompanyInformation."Register Company No." := RegisterCompanyNo;
        CompanyInformation."VAT Registration No." := VATRegistrationNo;
        CompanyInformation."Fiscal Code" := FiscalCode;
        CompanyInformation.Modify();
    end;

    local procedure UpdateGLSetupLastGenJourPrintingDate(LastGenJourPrintingDate: Date)
    var
        GeneralLedgerSetup: Record "General Ledger Setup";
    begin
        GeneralLedgerSetup.Get();
        GeneralLedgerSetup."Last Gen. Jour. Printing Date" := LastGenJourPrintingDate;
        GeneralLedgerSetup."Last Printed G/L Book Page" := LibraryRandom.RandInt(5);
        GeneralLedgerSetup.Modify();
    end;

    local procedure VerifyValuesOnCustSheetPrintReport(DetailedCustLedgEntry: Record "Detailed Cust. Ledg. Entry")
    begin
        LibraryReportDataset.LoadDataSetFile();
        LibraryReportDataset.AssertElementWithValueExists(CustomerNumberCap, DetailedCustLedgEntry."Customer No.");
        LibraryReportDataset.AssertElementWithValueExists(AmountLCYCap, DetailedCustLedgEntry."Amount (LCY)");
        LibraryReportDataset.AssertElementWithValueExists(PrintedEntriesTotalCap, Format(PrintedEntriesTotalTxt));
        LibraryReportDataset.AssertElementWithValueExists(ProgressiveTotCap, Format(ProgressiveTotalTxt));
        LibraryReportDataset.AssertElementWithValueExists(StartOnHandAmountLCYCap, DetailedCustLedgEntry."Amount (LCY)");
        LibraryReportDataset.AssertElementWithValueExists(IcreasesAmntCap, DetailedCustLedgEntry.Amount);
        LibraryReportDataset.AssertElementWithValueExists(OrigAmountCap, Format(DetailedCustLedgEntry.Amount));
        LibraryReportDataset.AssertElementWithValueExists(CurrencyCodeCap, DetailedCustLedgEntry."Currency Code");
    end;

    [RequestPageHandler]
    [Scope('OnPrem')]
    procedure BankSheetPrintRequestPageHandler(var BankSheetPrint: TestRequestPage "Bank Sheet - Print")
    var
        No: Variant;
    begin
        LibraryVariableStorage.Dequeue(No);
        BankSheetPrint."Bank Account".SetFilter("No.", No);
        BankSheetPrint."Bank Account".SetFilter("Date Filter", Format(WorkDate()));
        BankSheetPrint.SaveAsXml(LibraryReportDataset.GetParametersFileName(), LibraryReportDataset.GetFileName());
    end;

    [RequestPageHandler]
    [Scope('OnPrem')]
    procedure GLBookPrintRequestPageHandler(var GLBookPrint: TestRequestPage "G/L Book - Print")
    var
        StartingDate: Variant;
        EndingDate: Variant;
        ReportType: Variant;
    begin
        LibraryVariableStorage.Dequeue(ReportType);
        LibraryVariableStorage.Dequeue(StartingDate);
        LibraryVariableStorage.Dequeue(EndingDate);
        GLBookPrint.PrintCompanyInformations.SetValue(false);
        GLBookPrint.ReportType.SetValue(ReportType);
        GLBookPrint.StartingDate.SetValue(StartingDate);
        GLBookPrint.EndingDate.SetValue(EndingDate);
        GLBookPrint.SaveAsXml(LibraryReportDataset.GetParametersFileName(), LibraryReportDataset.GetFileName());
    end;

    [RequestPageHandler]
    [Scope('OnPrem')]
    procedure VATRegisterGroupedRequestPageHandler(var VATRegisterGrouped: TestRequestPage "VAT Register Grouped")
    var
        PeriodStartingDate: Variant;
        PeriodEndingDate: Variant;
        PrintCompanyInformations: Variant;
    begin
        LibraryVariableStorage.Dequeue(PeriodStartingDate);
        LibraryVariableStorage.Dequeue(PeriodEndingDate);
        LibraryVariableStorage.Dequeue(PrintCompanyInformations);
        VATRegisterGrouped.PeriodStartingDate.SetValue(Format(PeriodStartingDate));
        VATRegisterGrouped.PeriodEndingDate.SetValue(Format(PeriodEndingDate));
        VATRegisterGrouped.PrintCompanyInformations.SetValue(PrintCompanyInformations);
        VATRegisterGrouped.SaveAsXml(LibraryReportDataset.GetParametersFileName(), LibraryReportDataset.GetFileName());
    end;

    [RequestPageHandler]
    [Scope('OnPrem')]
    procedure VATRegisterPrintRequestPageHandler(var VATRegisterPrint: TestRequestPage "VAT Register - Print")
    var
        CompanyInformation: Record "Company Information";
    begin
        CompanyInformation.Get();
        VATRegisterPrint.VATRegister.SetValue(CreateVATRegister());
        VATRegisterPrint.PeriodStartingDate.SetValue(WorkDate());
        VATRegisterPrint.Name.SetValue(CompanyInformation.Name);
        VATRegisterPrint.Address.SetValue(CompanyInformation.Address);
        VATRegisterPrint.PostCodeCityCounty.SetValue(CompanyInformation."Post Code");
        VATRegisterPrint.RegisterCompanyNo.SetValue(CompanyInformation."Register Company No.");
        VATRegisterPrint.VATRegistrationNo.SetValue(CompanyInformation."VAT Registration No.");
        VATRegisterPrint.FiscalCode.SetValue(CompanyInformation."Fiscal Code");
        VATRegisterPrint.SaveAsXml(LibraryReportDataset.GetParametersFileName(), LibraryReportDataset.GetFileName());
    end;

    [RequestPageHandler]
    [Scope('OnPrem')]
    procedure CustomerSheetPrintRequestPageHandler(var CustomerSheetPrint: TestRequestPage "Customer Sheet - Print")
    var
        No: Variant;
    begin
        LibraryVariableStorage.Dequeue(No);
        CustomerSheetPrint.Customer.SetFilter("No.", No);
        CustomerSheetPrint.Customer.SetFilter("Date Filter", Format(WorkDate()));
        CustomerSheetPrint.SaveAsXml(LibraryReportDataset.GetParametersFileName(), LibraryReportDataset.GetFileName());
    end;

    [RequestPageHandler]
    [Scope('OnPrem')]
    procedure VATRegisterGroupedReqPageHandler(var VATRegisterGrouped: TestRequestPage "VAT Register Grouped")
    var
        CompanyInformation: Record "Company Information";
    begin
        CompanyInformation.Get();
        VATRegisterGrouped.Name.AssertEquals(CompanyInformation.Name);
        VATRegisterGrouped.Address.AssertEquals(CompanyInformation.Address);
        VATRegisterGrouped.VATRegistrationNo.AssertEquals(CompanyInformation."VAT Registration No.");
        VATRegisterGrouped.Cancel().Invoke();
    end;
}

